import { DerivePriKeyParams, GetDerivedPathParam, GetRawTransactionParams, NewAddressParams, SignTxParams, ValidAddressParams, VerifyMessageParams, BaseWallet, ValidPrivateKeyParams } from "@okxweb3/coin-base";
import { GenerateUnsignedContractCallTxArgs, GenerateUnsignedContractDeployTxArgs } from './index';
export type StxTransactionType = "transfer" | "stack" | "tokenTransfer" | "allowContractCaller" | "delegateStx" | "revokeDelegateStx" | "contractCall" | "deployContract";
export type StxSignData = {
    type: StxTransactionType;
    data: TokenTransfer | StxTransfer | AllowContractCaller | DelegateStx | RevokeDelegateStx | GenerateUnsignedContractCallTxArgs | contractCallPayload | GenerateUnsignedContractDeployTxArgs | deployPayload;
};
export interface DelegateStx {
    contract: string;
    contractName: string;
    functionName: string;
    delegateTo: string;
    untilBurnBlockHeight: number;
    amountMicroStx: number;
    poxAddress: string;
    cycles: number;
    burnBlockHeight: number;
    fee: number;
    nonce: number;
}
export interface RevokeDelegateStx {
    contract: string;
    contractName: string;
    functionName: string;
    fee: number;
    nonce: number;
}
export interface contractCallPayload {
    contract: string;
    contractName: string;
    functionName: string;
    functionArgs: string[];
}
export interface deployPayload {
    contractName: string;
    codeBody: string;
}
export interface StxTransfer {
    to: string;
    amount: number;
    memo: string;
    nonce: number;
    fee: number;
    anchorMode?: number;
}
export interface TokenTransfer {
    from: string;
    to: string;
    memo: string;
    amount: number;
    contract: string;
    contractName: string;
    tokenName: string;
    functionName: string;
    nonce: number;
    fee: number;
}
export interface AllowContractCaller {
    contract: string;
    contractName: string;
    functionName: string;
    caller: string;
    untilBurnBlockHeight: number;
    nonce: number;
    fee: number;
}
export type signTransactionResult = {
    txId: string;
    txSerializedHexString: string;
};
export declare class StxWallet extends BaseWallet {
    getDerivedPath(param: GetDerivedPathParam): Promise<any>;
    getDerivedPrivateKey(param: DerivePriKeyParams): Promise<any>;
    getRandomPrivateKey(): Promise<any>;
    getNewAddress(param: NewAddressParams): Promise<any>;
    checkPrivateKey(privateKeyHex: string): boolean;
    validPrivateKey(param: ValidPrivateKeyParams): Promise<any>;
    signTransaction(param: SignTxParams): Promise<any>;
    signMessage(param: SignTxParams): Promise<any>;
    verifyMessage(param: VerifyMessageParams): Promise<any>;
    validAddress(param: ValidAddressParams): Promise<any>;
    getRawTransaction(param: GetRawTransactionParams): Promise<string>;
}
