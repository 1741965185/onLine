"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDelegateOptions = exports.renamePrivateKey = exports.stack = void 0;
const common_1 = require("../common");
const network_1 = require("../network");
const transactions_1 = require("../transactions");
const utils_1 = require("./utils");
__exportStar(require("./utils"), exports);
async function stack({ contract, amountMicroStx, poxAddress, cycles, burnBlockHeight, ...txOptions }) {
    (0, utils_1.ensureLegacyBtcAddressForPox1)({ contract, poxAddress });
    const callOptions = getStackOptions({
        amountMicroStx,
        cycles,
        poxAddress,
        contract,
        burnBlockHeight,
    });
    const tx = await (0, transactions_1.makeContractCall)({
        ...callOptions,
        ...renamePrivateKey(txOptions),
    });
    const txId = (0, transactions_1.addHex)(tx.txid());
    const txSerializedHexString = (0, common_1.bytesToHex)(tx.serialize());
    return { txId, txSerializedHexString };
}
exports.stack = stack;
function getStackOptions({ amountMicroStx, poxAddress, cycles, contract, burnBlockHeight, }) {
    const address = (0, utils_1.poxAddressToTuple)(poxAddress);
    const [contractAddress, contractName] = parseContractId(contract);
    const callOptions = {
        contractAddress,
        contractName,
        functionName: 'stack-stx',
        functionArgs: [(0, transactions_1.uintCV)(amountMicroStx), address, (0, transactions_1.uintCV)(burnBlockHeight), (0, transactions_1.uintCV)(cycles)],
        validateWithAbi: true,
        network: new network_1.StacksMainnet(),
        anchorMode: transactions_1.AnchorMode.Any,
    };
    return callOptions;
}
function parseContractId(contract) {
    const parts = contract.split('.');
    if (parts.length === 2 && (0, transactions_1.validateStacksAddress)(parts[0]) && parts[1].startsWith('pox')) {
        return parts;
    }
    throw new Error('Stacking contract ID is malformed');
}
function renamePrivateKey(txOptions) {
    txOptions.senderKey = txOptions.privateKey;
    delete txOptions.privateKey;
    return txOptions;
}
exports.renamePrivateKey = renamePrivateKey;
function getDelegateOptions(contractAddress, contractName, functionName, amountMicroStx, delegateTo, untilBurnBlockHeight, poxAddress) {
    const address = poxAddress ? (0, transactions_1.someCV)((0, utils_1.poxAddressToTuple)(poxAddress)) : (0, transactions_1.noneCV)();
    const callOptions = {
        contractAddress,
        contractName,
        functionName,
        functionArgs: [
            (0, transactions_1.uintCV)(amountMicroStx),
            (0, transactions_1.principalCV)(delegateTo),
            untilBurnBlockHeight ? (0, transactions_1.someCV)((0, transactions_1.uintCV)(untilBurnBlockHeight)) : (0, transactions_1.noneCV)(),
            address,
        ],
        validateWithAbi: true,
        network: new network_1.StacksMainnet(),
        anchorMode: transactions_1.AnchorMode.Any,
    };
    return callOptions;
}
exports.getDelegateOptions = getDelegateOptions;
//# sourceMappingURL=index.js.map