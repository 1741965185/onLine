import { SignerInterface } from '../signer';
import { Abi, AllowArray, Call, CairoVersion, DeclareContractPayload, DeclareContractTransaction, DeployAccountContractPayload, InvocationsDetails, InvocationsSignerDetails, Signature, UniversalDeployerContractPayload } from '../types';
import { AccountInterface } from './interface';
import { TypedData } from '../utils/typedData';
export declare class Account implements AccountInterface {
    signer: SignerInterface;
    address: string;
    cairoVersion: CairoVersion;
    constructor(address: string, pkOrSigner: Uint8Array | string | SignerInterface, cairoVersion?: CairoVersion);
    signMessage(typedData: TypedData): Promise<Signature>;
    declare(payload: DeclareContractPayload, transactionsDetail: InvocationsDetails): Promise<any>;
    execute(calls: AllowArray<Call>, abis: Abi[] | undefined, transactionsDetail: InvocationsDetails): Promise<any>;
    deploy(payload: UniversalDeployerContractPayload | UniversalDeployerContractPayload[], details: InvocationsDetails): Promise<any>;
    deployAccount({ classHash, constructorCalldata, addressSalt, contractAddress: providedContractAddress, }: DeployAccountContractPayload, transactionsDetail: InvocationsDetails): Promise<any>;
    buildDeclareContractTransaction(payload: DeclareContractPayload, { nonce, chainId, version, walletAddress, maxFee }: InvocationsSignerDetails): Promise<DeclareContractTransaction>;
    hashMessage(typedData: TypedData): Promise<string>;
}
