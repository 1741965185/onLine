import { SignerInterface } from '../signer';
import { Abi, AllowArray, Call, CairoVersion, DeclareContractPayload, DeployAccountContractPayload, InvocationsDetails, Signature } from '../types';
import { TypedData } from '../utils/typedData/types';
export declare abstract class AccountInterface {
    abstract address: string;
    abstract signer: SignerInterface;
    abstract cairoVersion: CairoVersion;
    abstract signMessage(typedData: TypedData): Promise<Signature>;
    abstract execute(transactions: AllowArray<Call>, abis?: Abi[], transactionsDetail?: InvocationsDetails): Promise<any>;
    abstract declare(contractPayload: DeclareContractPayload, transactionsDetail?: InvocationsDetails): Promise<any>;
    abstract deployAccount(contractPayload: DeployAccountContractPayload, transactionsDetail?: InvocationsDetails): Promise<any>;
}
