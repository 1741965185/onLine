"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cairo_1 = require("./cairo");
function parseNamedTuple(namedTuple) {
    const name = namedTuple.substring(0, namedTuple.indexOf(':'));
    const type = namedTuple.substring(name.length + ':'.length);
    return { name, type };
}
function parseSubTuple(s) {
    if (!s.includes('('))
        return { subTuple: [], result: s };
    const subTuple = [];
    let result = '';
    let i = 0;
    while (i < s.length) {
        if (s[i] === '(') {
            let counter = 1;
            const lBracket = i;
            i++;
            while (counter) {
                if (s[i] === ')')
                    counter--;
                if (s[i] === '(')
                    counter++;
                i++;
            }
            subTuple.push(s.substring(lBracket, i));
            result += ' ';
            i--;
        }
        else {
            result += s[i];
        }
        i++;
    }
    return {
        subTuple,
        result,
    };
}
function extractTupleMemberTypes(type) {
    const cleanType = type.replace(/\s/g, '').slice(1, -1);
    const { subTuple, result } = parseSubTuple(cleanType);
    let recomposed = result.split(',').map((it) => {
        return subTuple.length ? it.replace(' ', subTuple.shift()) : it;
    });
    if ((0, cairo_1.isTypeNamedTuple)(type)) {
        recomposed = recomposed.reduce((acc, it) => {
            return acc.concat(parseNamedTuple(it));
        }, []);
    }
    return recomposed;
}
exports.default = extractTupleMemberTypes;
//# sourceMappingURL=tuple.js.map