"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cairo_1 = require("./cairo");
const tuple_1 = __importDefault(require("./tuple"));
function parseResponseStruct(responseIterator, type, structs) {
    if (type in structs && structs[type]) {
        return structs[type].members.reduce((acc, el) => {
            acc[el.name] = parseResponseStruct(responseIterator, el.type, structs);
            return acc;
        }, {});
    }
    if ((0, cairo_1.isTypeTuple)(type)) {
        const memberTypes = (0, tuple_1.default)(type);
        return memberTypes.reduce((acc, it, idx) => {
            const tName = it?.name ? it.name : idx;
            const tType = it?.type ? it.type : it;
            acc[tName] = parseResponseStruct(responseIterator, tType, structs);
            return acc;
        }, {});
    }
    const temp = responseIterator.next().value;
    return BigInt(temp);
}
function responseParser(responseIterator, output, structs, parsedResult) {
    const { name, type } = output;
    let temp;
    switch (true) {
        case (0, cairo_1.isLen)(name):
            temp = responseIterator.next().value;
            return BigInt(temp);
        case (0, cairo_1.isTypeArray)(type):
            const parsedDataArr = [];
            if (parsedResult && parsedResult[`${name}_len`]) {
                const arrLen = parsedResult[`${name}_len`];
                while (parsedDataArr.length < arrLen) {
                    parsedDataArr.push(parseResponseStruct(responseIterator, output.type.replace('*', ''), structs));
                }
            }
            return parsedDataArr;
        case type in structs || (0, cairo_1.isTypeTuple)(type):
            return parseResponseStruct(responseIterator, type, structs);
        default:
            temp = responseIterator.next().value;
            return BigInt(temp);
    }
}
exports.default = responseParser;
//# sourceMappingURL=responseParser.js.map