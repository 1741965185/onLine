import { AbiStructs } from '../../types';
import { BigNumberish } from '../num';
import { Uint256 } from '../uint256';
export declare const isLen: (name: string) => boolean;
export declare const isTypeFelt: (type: string) => boolean;
export declare const isTypeFeltArray: (type: string) => boolean;
export declare const isTypeArray: (type: string) => boolean;
export declare const isTypeTuple: (type: string) => boolean;
export declare const isTypeNamedTuple: (type: string) => boolean;
export declare const isTypeStruct: (type: string, structs: AbiStructs) => boolean;
export declare const uint256: (it: BigNumberish) => Uint256;
export declare const tuple: (...args: (BigNumberish | object)[]) => {
    [x: number]: object | BigNumberish;
    length: number;
    toString(): string;
    toLocaleString(): string;
    pop(): object | BigNumberish | undefined;
    push(...items: (object | BigNumberish)[]): number;
    concat(...items: ConcatArray<object | BigNumberish>[]): (object | BigNumberish)[];
    concat(...items: (object | BigNumberish | ConcatArray<object | BigNumberish>)[]): (object | BigNumberish)[];
    join(separator?: string | undefined): string;
    reverse(): (object | BigNumberish)[];
    shift(): object | BigNumberish | undefined;
    slice(start?: number | undefined, end?: number | undefined): (object | BigNumberish)[];
    sort(compareFn?: ((a: object | BigNumberish, b: object | BigNumberish) => number) | undefined): (object | BigNumberish)[];
    splice(start: number, deleteCount?: number | undefined): (object | BigNumberish)[];
    splice(start: number, deleteCount: number, ...items: (object | BigNumberish)[]): (object | BigNumberish)[];
    unshift(...items: (object | BigNumberish)[]): number;
    indexOf(searchElement: object | BigNumberish, fromIndex?: number | undefined): number;
    lastIndexOf(searchElement: object | BigNumberish, fromIndex?: number | undefined): number;
    every<S extends object | BigNumberish>(predicate: (value: object | BigNumberish, index: number, array: (object | BigNumberish)[]) => value is S, thisArg?: any): this is S[];
    every(predicate: (value: object | BigNumberish, index: number, array: (object | BigNumberish)[]) => unknown, thisArg?: any): boolean;
    some(predicate: (value: object | BigNumberish, index: number, array: (object | BigNumberish)[]) => unknown, thisArg?: any): boolean;
    forEach(callbackfn: (value: object | BigNumberish, index: number, array: (object | BigNumberish)[]) => void, thisArg?: any): void;
    map<U>(callbackfn: (value: object | BigNumberish, index: number, array: (object | BigNumberish)[]) => U, thisArg?: any): U[];
    filter<S_1 extends object | BigNumberish>(predicate: (value: object | BigNumberish, index: number, array: (object | BigNumberish)[]) => value is S_1, thisArg?: any): S_1[];
    filter(predicate: (value: object | BigNumberish, index: number, array: (object | BigNumberish)[]) => unknown, thisArg?: any): (object | BigNumberish)[];
    reduce(callbackfn: (previousValue: object | BigNumberish, currentValue: object | BigNumberish, currentIndex: number, array: (object | BigNumberish)[]) => object | BigNumberish): object | BigNumberish;
    reduce(callbackfn: (previousValue: object | BigNumberish, currentValue: object | BigNumberish, currentIndex: number, array: (object | BigNumberish)[]) => object | BigNumberish, initialValue: object | BigNumberish): object | BigNumberish;
    reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: object | BigNumberish, currentIndex: number, array: (object | BigNumberish)[]) => U_1, initialValue: U_1): U_1;
    reduceRight(callbackfn: (previousValue: object | BigNumberish, currentValue: object | BigNumberish, currentIndex: number, array: (object | BigNumberish)[]) => object | BigNumberish): object | BigNumberish;
    reduceRight(callbackfn: (previousValue: object | BigNumberish, currentValue: object | BigNumberish, currentIndex: number, array: (object | BigNumberish)[]) => object | BigNumberish, initialValue: object | BigNumberish): object | BigNumberish;
    reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: object | BigNumberish, currentIndex: number, array: (object | BigNumberish)[]) => U_2, initialValue: U_2): U_2;
    find<S_2 extends object | BigNumberish>(predicate: (this: void, value: object | BigNumberish, index: number, obj: (object | BigNumberish)[]) => value is S_2, thisArg?: any): S_2 | undefined;
    find(predicate: (value: object | BigNumberish, index: number, obj: (object | BigNumberish)[]) => unknown, thisArg?: any): object | BigNumberish | undefined;
    findIndex(predicate: (value: object | BigNumberish, index: number, obj: (object | BigNumberish)[]) => unknown, thisArg?: any): number;
    fill(value: object | BigNumberish, start?: number | undefined, end?: number | undefined): (object | BigNumberish)[];
    copyWithin(target: number, start: number, end?: number | undefined): (object | BigNumberish)[];
    entries(): IterableIterator<[number, object | BigNumberish]>;
    keys(): IterableIterator<number>;
    values(): IterableIterator<object | BigNumberish>;
    includes(searchElement: object | BigNumberish, fromIndex?: number | undefined): boolean;
    flatMap<U_3, This = undefined>(callback: (this: This, value: object | BigNumberish, index: number, array: (object | BigNumberish)[]) => U_3 | readonly U_3[], thisArg?: This | undefined): U_3[];
    flat<A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[];
    [Symbol.iterator](): IterableIterator<object | BigNumberish>;
    [Symbol.unscopables](): {
        copyWithin: boolean;
        entries: boolean;
        fill: boolean;
        find: boolean;
        findIndex: boolean;
        keys: boolean;
        values: boolean;
    };
};
export declare function felt(it: BigNumberish): string;
