"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExecuteCalldata = exports.fromCallsToExecuteCalldata_cairo1 = exports.transformCallsToMulticallArrays_cairo1 = exports.fromCallsToExecuteCalldataWithNonce = exports.fromCallsToExecuteCalldata = exports.transformCallsToMulticallArrays = void 0;
const hash_1 = require("./hash");
const num_1 = require("./num");
const calldata_1 = require("./calldata");
const transformCallsToMulticallArrays = (calls) => {
    const callArray = [];
    const calldata = [];
    calls.forEach((call) => {
        const data = calldata_1.CallData.compile(call.calldata || []);
        callArray.push({
            to: (0, num_1.toBigInt)(call.contractAddress).toString(10),
            selector: call.entrypoint.startsWith("0x") ? (0, num_1.toBigInt)(call.entrypoint) : (0, num_1.toBigInt)((0, hash_1.getSelectorFromName)(call.entrypoint)).toString(10),
            data_offset: calldata.length.toString(),
            data_len: data.length.toString(),
        });
        calldata.push(...data);
    });
    return {
        callArray,
        calldata: calldata_1.CallData.compile({ calldata }),
    };
};
exports.transformCallsToMulticallArrays = transformCallsToMulticallArrays;
const fromCallsToExecuteCalldata = (calls) => {
    const { callArray, calldata } = (0, exports.transformCallsToMulticallArrays)(calls);
    const compiledCalls = calldata_1.CallData.compile({ callArray });
    return [...compiledCalls, ...calldata];
};
exports.fromCallsToExecuteCalldata = fromCallsToExecuteCalldata;
const fromCallsToExecuteCalldataWithNonce = (calls, nonce) => {
    return [...(0, exports.fromCallsToExecuteCalldata)(calls), (0, num_1.toBigInt)(nonce).toString()];
};
exports.fromCallsToExecuteCalldataWithNonce = fromCallsToExecuteCalldataWithNonce;
const transformCallsToMulticallArrays_cairo1 = (calls) => {
    const callArray = calls.map((call) => ({
        to: (0, num_1.toBigInt)(call.contractAddress).toString(10),
        selector: (0, num_1.toBigInt)((0, hash_1.getSelectorFromName)(call.entrypoint)).toString(10),
        calldata: calldata_1.CallData.compile(call.calldata || []),
    }));
    return callArray;
};
exports.transformCallsToMulticallArrays_cairo1 = transformCallsToMulticallArrays_cairo1;
const fromCallsToExecuteCalldata_cairo1 = (calls) => {
    const callArray = (0, exports.transformCallsToMulticallArrays_cairo1)(calls);
    return [
        callArray.length.toString(),
        ...callArray
            .map(({ to, selector, calldata }) => [to, selector, calldata.length.toString(), ...calldata])
            .flat(),
    ];
};
exports.fromCallsToExecuteCalldata_cairo1 = fromCallsToExecuteCalldata_cairo1;
const getExecuteCalldata = (calls, cairoVersion = '0') => {
    if (cairoVersion === '1') {
        return (0, exports.fromCallsToExecuteCalldata_cairo1)(calls);
    }
    return (0, exports.fromCallsToExecuteCalldata)(calls);
};
exports.getExecuteCalldata = getExecuteCalldata;
//# sourceMappingURL=transaction.js.map