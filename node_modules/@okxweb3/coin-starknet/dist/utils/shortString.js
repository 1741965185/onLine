"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeShortString = exports.encodeShortString = exports.splitLongString = exports.isLongText = exports.isShortText = exports.isText = exports.isDecimalString = exports.isShortString = exports.isASCII = void 0;
const encode_1 = require("./encode");
const num_1 = require("./num");
const TEXT_TO_FELT_MAX_LEN = 31;
function isASCII(str) {
    return /^[\x00-\x7F]*$/.test(str);
}
exports.isASCII = isASCII;
function isShortString(str) {
    return str.length <= TEXT_TO_FELT_MAX_LEN;
}
exports.isShortString = isShortString;
function isDecimalString(decim) {
    return /^[0-9]*$/i.test(decim);
}
exports.isDecimalString = isDecimalString;
function isText(val) {
    return typeof val === 'string' && !(0, num_1.isHex)(val) && !(0, num_1.isStringWholeNumber)(val);
}
exports.isText = isText;
const isShortText = (val) => isText(val) && isShortString(val);
exports.isShortText = isShortText;
const isLongText = (val) => isText(val) && !isShortString(val);
exports.isLongText = isLongText;
function splitLongString(longStr) {
    const regex = RegExp(`[^]{1,${TEXT_TO_FELT_MAX_LEN}}`, 'g');
    return longStr.match(regex) || [];
}
exports.splitLongString = splitLongString;
function encodeShortString(str) {
    if (!isASCII(str))
        throw new Error(`${str} is not an ASCII string`);
    if (!isShortString(str))
        throw new Error(`${str} is too long`);
    return (0, encode_1.addHexPrefix)(str.replace(/./g, (char) => char.charCodeAt(0).toString(16)));
}
exports.encodeShortString = encodeShortString;
function decodeShortString(str) {
    if (!isASCII(str))
        throw new Error(`${str} is not an ASCII string`);
    if ((0, num_1.isHex)(str)) {
        return (0, encode_1.removeHexPrefix)(str).replace(/.{2}/g, (hex) => String.fromCharCode(parseInt(hex, 16)));
    }
    if (isDecimalString(str)) {
        return decodeShortString('0X'.concat(BigInt(str).toString(16)));
    }
    throw new Error(`${str} is not Hex or decimal`);
}
exports.decodeShortString = decodeShortString;
//# sourceMappingURL=shortString.js.map