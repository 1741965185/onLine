"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringify = void 0;
const utils_1 = require("./utils");
function stringify(value, replacer, space, numberStringifiers) {
    const resolvedSpace = resolveSpace(space);
    const replacedValue = typeof replacer === 'function' ? replacer.call({ '': value }, '', value) : value;
    return stringifyValue(replacedValue, '');
    function stringifyValue(value, indent) {
        if (Array.isArray(numberStringifiers)) {
            const stringifier = numberStringifiers.find((item) => item.test(value));
            if (stringifier) {
                const str = stringifier.stringify(value);
                if (typeof str !== 'string' || !(0, utils_1.isNumber)(str)) {
                    throw new Error('Invalid JSON number: ' +
                        'output of a number stringifier must be a string containing a JSON number ' +
                        `(output: ${str})`);
                }
                return str;
            }
        }
        if (typeof value === 'boolean' ||
            typeof value === 'number' ||
            typeof value === 'string' ||
            value === null ||
            value instanceof Date ||
            value instanceof Boolean ||
            value instanceof Number ||
            value instanceof String) {
            return JSON.stringify(value);
        }
        if (value && value.isLosslessNumber) {
            return value.toString();
        }
        if (typeof value === 'bigint') {
            return value.toString();
        }
        if (Array.isArray(value)) {
            return stringifyArray(value, indent);
        }
        if (value && typeof value === 'object') {
            return stringifyObject(value, indent);
        }
        return undefined;
    }
    function stringifyArray(array, indent) {
        if (array.length === 0) {
            return '[]';
        }
        const childIndent = resolvedSpace ? indent + resolvedSpace : undefined;
        let str = resolvedSpace ? '[\n' : '[';
        for (let i = 0; i < array.length; i++) {
            const item = typeof replacer === 'function' ? replacer.call(array, String(i), array[i]) : array[i];
            if (resolvedSpace) {
                str += childIndent;
            }
            if (typeof item !== 'undefined' && typeof item !== 'function') {
                str += stringifyValue(item, childIndent);
            }
            else {
                str += 'null';
            }
            if (i < array.length - 1) {
                str += resolvedSpace ? ',\n' : ',';
            }
        }
        str += resolvedSpace ? '\n' + indent + ']' : ']';
        return str;
    }
    function stringifyObject(object, indent) {
        if (typeof object.toJSON === 'function') {
            return stringify(object.toJSON(), replacer, space, undefined);
        }
        const keys = Array.isArray(replacer) ? replacer.map(String) : Object.keys(object);
        if (keys.length === 0) {
            return '{}';
        }
        const childIndent = resolvedSpace ? indent + resolvedSpace : undefined;
        let first = true;
        let str = resolvedSpace ? '{\n' : '{';
        keys.forEach((key) => {
            const value = typeof replacer === 'function' ? replacer.call(object, key, object[key]) : object[key];
            if (includeProperty(key, value)) {
                if (first) {
                    first = false;
                }
                else {
                    str += resolvedSpace ? ',\n' : ',';
                }
                const keyStr = JSON.stringify(key);
                str += resolvedSpace ? childIndent + keyStr + ': ' : keyStr + ':';
                str += stringifyValue(value, childIndent);
            }
        });
        str += resolvedSpace ? '\n' + indent + '}' : '}';
        return str;
    }
    function includeProperty(key, value) {
        return typeof value !== 'undefined' && typeof value !== 'function' && typeof value !== 'symbol';
    }
}
exports.stringify = stringify;
function resolveSpace(space) {
    if (typeof space === 'number') {
        return ' '.repeat(space);
    }
    if (typeof space === 'string' && space !== '') {
        return space;
    }
    return undefined;
}
//# sourceMappingURL=stringify.js.map