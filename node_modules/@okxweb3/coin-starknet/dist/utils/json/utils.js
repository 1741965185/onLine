"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractSignificantDigits = exports.toSafeNumberOrThrow = exports.getUnsafeNumberReason = exports.UnsafeNumberReason = exports.isSafeNumber = exports.isNumber = exports.isInteger = void 0;
function isInteger(value) {
    return INTEGER_REGEX.test(value);
}
exports.isInteger = isInteger;
const INTEGER_REGEX = /^-?[0-9]+$/;
function isNumber(value) {
    return NUMBER_REGEX.test(value);
}
exports.isNumber = isNumber;
const NUMBER_REGEX = /^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/;
function isSafeNumber(value, config) {
    const num = parseFloat(value);
    const str = String(num);
    const v = extractSignificantDigits(value);
    const s = extractSignificantDigits(str);
    if (v === s) {
        return true;
    }
    if (config?.approx === true) {
        const requiredDigits = 14;
        if (!isInteger(value) &&
            s.length >= requiredDigits &&
            v.startsWith(s.substring(0, requiredDigits))) {
            return true;
        }
    }
    return false;
}
exports.isSafeNumber = isSafeNumber;
var UnsafeNumberReason;
(function (UnsafeNumberReason) {
    UnsafeNumberReason["underflow"] = "underflow";
    UnsafeNumberReason["overflow"] = "overflow";
    UnsafeNumberReason["truncate_integer"] = "truncate_integer";
    UnsafeNumberReason["truncate_float"] = "truncate_float";
})(UnsafeNumberReason = exports.UnsafeNumberReason || (exports.UnsafeNumberReason = {}));
function getUnsafeNumberReason(value) {
    if (isSafeNumber(value, { approx: false })) {
        return undefined;
    }
    if (isInteger(value)) {
        return UnsafeNumberReason.truncate_integer;
    }
    const num = parseFloat(value);
    if (!isFinite(num)) {
        return UnsafeNumberReason.overflow;
    }
    if (num === 0) {
        return UnsafeNumberReason.underflow;
    }
    return UnsafeNumberReason.truncate_float;
}
exports.getUnsafeNumberReason = getUnsafeNumberReason;
function toSafeNumberOrThrow(value, config) {
    const number = parseFloat(value);
    const unsafeReason = getUnsafeNumberReason(value);
    if (config?.approx === true
        ? unsafeReason && unsafeReason !== UnsafeNumberReason.truncate_float
        : unsafeReason) {
        const unsafeReasonText = unsafeReason.replace(/_\w+$/, '');
        throw new Error('Cannot safely convert to number: ' +
            `the value '${value}' would ${unsafeReasonText} and become ${number}`);
    }
    return number;
}
exports.toSafeNumberOrThrow = toSafeNumberOrThrow;
function extractSignificantDigits(value) {
    return (value
        .replace(EXPONENTIAL_PART_REGEX, '')
        .replace(DOT_REGEX, '')
        .replace(TRAILING_ZEROS_REGEX, '')
        .replace(LEADING_MINUS_AND_ZEROS_REGEX, ''));
}
exports.extractSignificantDigits = extractSignificantDigits;
const EXPONENTIAL_PART_REGEX = /[eE][+-]?\d+$/;
const LEADING_MINUS_AND_ZEROS_REGEX = /^-?(0*)?/;
const DOT_REGEX = /\./;
const TRAILING_ZEROS_REGEX = /0+$/;
//# sourceMappingURL=utils.js.map