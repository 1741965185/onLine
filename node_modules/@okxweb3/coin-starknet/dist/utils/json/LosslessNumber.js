"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toLosslessNumber = exports.isLosslessNumber = exports.LosslessNumber = void 0;
const utils_1 = require("./utils");
class LosslessNumber {
    constructor(value) {
        this.isLosslessNumber = true;
        if (!(0, utils_1.isNumber)(value)) {
            throw new Error('Invalid number (value: "' + value + '")');
        }
        this.value = value;
    }
    valueOf() {
        const unsafeReason = (0, utils_1.getUnsafeNumberReason)(this.value);
        if (unsafeReason === undefined || unsafeReason === utils_1.UnsafeNumberReason.truncate_float) {
            return parseFloat(this.value);
        }
        if ((0, utils_1.isInteger)(this.value)) {
            return BigInt(this.value);
        }
        throw new Error('Cannot safely convert to number: ' +
            `the value '${this.value}' would ${unsafeReason} and become ${parseFloat(this.value)}`);
    }
    toString() {
        return this.value;
    }
}
exports.LosslessNumber = LosslessNumber;
function isLosslessNumber(value) {
    return (value && typeof value === 'object' && value.isLosslessNumber === true) || false;
}
exports.isLosslessNumber = isLosslessNumber;
function toLosslessNumber(value) {
    if ((0, utils_1.extractSignificantDigits)(value + '').length > 15) {
        throw new Error('Invalid number: contains more than 15 digits and is most likely truncated and unsafe by itself ' +
            `(value: ${value})`);
    }
    if (isNaN(value)) {
        throw new Error('Invalid number: NaN');
    }
    if (!isFinite(value)) {
        throw new Error('Invalid number: ' + value);
    }
    return new LosslessNumber(String(value));
}
exports.toLosslessNumber = toLosslessNumber;
//# sourceMappingURL=LosslessNumber.js.map