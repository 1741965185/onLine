"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.proofMerklePath = exports.MerkleTree = void 0;
const ec_1 = require("./ec");
const num_1 = require("./num");
class MerkleTree {
    constructor(leafHashes) {
        this.branches = [];
        this.leaves = leafHashes;
        this.root = this.build(leafHashes);
    }
    build(leaves) {
        if (leaves.length === 1) {
            return leaves[0];
        }
        if (leaves.length !== this.leaves.length) {
            this.branches.push(leaves);
        }
        const newLeaves = [];
        for (let i = 0; i < leaves.length; i += 2) {
            if (i + 1 === leaves.length) {
                newLeaves.push(MerkleTree.hash(leaves[i], '0x0'));
            }
            else {
                newLeaves.push(MerkleTree.hash(leaves[i], leaves[i + 1]));
            }
        }
        return this.build(newLeaves);
    }
    static hash(a, b) {
        const [aSorted, bSorted] = [(0, num_1.toBigInt)(a), (0, num_1.toBigInt)(b)].sort((x, y) => (x >= y ? 1 : -1));
        return ec_1.starkCurve.pedersen(aSorted, bSorted);
    }
    getProof(leaf, branch = this.leaves, hashPath = []) {
        const index = branch.indexOf(leaf);
        if (index === -1) {
            throw new Error('leaf not found');
        }
        if (branch.length === 1) {
            return hashPath;
        }
        const isLeft = index % 2 === 0;
        const neededBranch = (isLeft ? branch[index + 1] : branch[index - 1]) ?? '0x0';
        const newHashPath = [...hashPath, neededBranch];
        const currentBranchLevelIndex = this.leaves.length === branch.length
            ? -1
            : this.branches.findIndex((b) => b.length === branch.length);
        const nextBranch = this.branches[currentBranchLevelIndex + 1] ?? [this.root];
        return this.getProof(MerkleTree.hash(isLeft ? leaf : neededBranch, isLeft ? neededBranch : leaf), nextBranch, newHashPath);
    }
}
exports.MerkleTree = MerkleTree;
function proofMerklePath(root, leaf, path) {
    if (path.length === 0) {
        return root === leaf;
    }
    const [next, ...rest] = path;
    return proofMerklePath(root, MerkleTree.hash(leaf, next), rest);
}
exports.proofMerklePath = proofMerklePath;
//# sourceMappingURL=merkle.js.map