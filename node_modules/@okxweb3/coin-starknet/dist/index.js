"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.modPrivateKey = exports.testSign = exports.GetRandomPrivateKey = exports.verifyMessage = exports.signMessage = exports.signMessageWithTypeData = exports.CreateMultiContractCall = exports.CreateContractCall = exports.CreateTransferTx = exports.CreateSignedDeployAccountTx = exports.CalculateContractAddressFromHash = exports.number = exports.typedData = exports.shortString = exports.uint256 = exports.merkle = exports.ec = exports.stark = exports.transaction = exports.num = exports.json = exports.hash = exports.encode = exports.constants = void 0;
const account_1 = require("./account");
__exportStar(require("./signer"), exports);
__exportStar(require("./types"), exports);
__exportStar(require("./utils/hash"), exports);
__exportStar(require("./account"), exports);
exports.constants = __importStar(require("./constants"));
exports.encode = __importStar(require("./utils/encode"));
exports.hash = __importStar(require("./utils/hash"));
exports.json = __importStar(require("./utils/json"));
exports.num = __importStar(require("./utils/num"));
exports.transaction = __importStar(require("./utils/transaction"));
exports.stark = __importStar(require("./utils/stark"));
exports.ec = __importStar(require("./utils/ec"));
exports.merkle = __importStar(require("./utils/merkle"));
exports.uint256 = __importStar(require("./utils/uint256"));
exports.shortString = __importStar(require("./utils/shortString"));
exports.typedData = __importStar(require("./utils/typedData"));
__exportStar(require("./utils/address"), exports);
__exportStar(require("./utils/calldata"), exports);
__exportStar(require("./StarknetWallet"), exports);
const num = __importStar(require("./utils/num"));
exports.number = num;
const ec = __importStar(require("./utils/ec"));
const hash = __importStar(require("./utils/hash"));
const constants_1 = require("./constants");
const json = __importStar(require("./utils/json"));
const address_1 = require("./utils/address");
const crypto_lib_1 = require("@okxweb3/crypto-lib");
const ec_1 = require("./utils/ec");
const calldata_1 = require("./utils/calldata");
const encode_1 = require("./utils/encode");
function CalculateContractAddressFromHash(starkPub) {
    const constructorCallData = {
        implementation: constants_1.accountClassHash,
        selector: hash.getSelectorFromName("initialize"),
        calldata: calldata_1.CallData.compile({ signer: starkPub, guardian: "0" }),
    };
    const contractAddress = hash.calculateContractAddressFromHash(starkPub, constants_1.ProxyAccountClassHash, calldata_1.CallData.compile(constructorCallData), 0);
    return (0, address_1.addAddressPadding)(contractAddress);
}
exports.CalculateContractAddressFromHash = CalculateContractAddressFromHash;
async function CreateSignedDeployAccountTx(nonce, maxFee, chainId, privateKey) {
    const starkPub = ec.starkCurve.getStarkKey(privateKey);
    const contractAddress = CalculateContractAddressFromHash(starkPub);
    const AAaccount = new account_1.Account(contractAddress, (0, encode_1.addHexPrefix)(privateKey));
    const constructorCallData = {
        implementation: constants_1.accountClassHash,
        selector: hash.getSelectorFromName("initialize"),
        calldata: calldata_1.CallData.compile({ signer: starkPub, guardian: "0" }),
    };
    const callDate = calldata_1.CallData.compile(constructorCallData);
    const tx = await AAaccount.deployAccount({
        addressSalt: starkPub,
        classHash: constants_1.ProxyAccountClassHash,
        constructorCalldata: callDate,
        contractAddress: contractAddress
    }, { nonce, maxFee, chainId });
    return { txId: tx.txId, signature: json.stringify(tx.signature) };
}
exports.CreateSignedDeployAccountTx = CreateSignedDeployAccountTx;
async function CreateTransferTx(contractAddress, from, to, amount, nonce, maxFee, chainId, privateKey) {
    const AAaccount = new account_1.Account(from, (0, encode_1.addHexPrefix)(privateKey));
    const tx = await AAaccount.execute({
        contractAddress: contractAddress,
        entrypoint: "transfer",
        calldata: [to, amount, 0]
    }, undefined, {
        nonce: nonce,
        maxFee: maxFee,
        chainId: chainId,
    });
    return { txId: tx.txId, signature: json.stringify(tx.signature) };
}
exports.CreateTransferTx = CreateTransferTx;
async function CreateContractCall(contractAddress, from, functionName, callData, nonce, maxFee, chainId, privateKey) {
    const AAaccount = new account_1.Account(from, (0, encode_1.addHexPrefix)(privateKey));
    if (!callData) {
        callData = [];
    }
    const tx = await AAaccount.execute({
        contractAddress: contractAddress,
        entrypoint: functionName,
        calldata: callData
    }, undefined, {
        nonce: nonce,
        maxFee: maxFee,
        chainId: chainId,
    });
    return { txId: tx.txId, signature: json.stringify(tx.signature) };
}
exports.CreateContractCall = CreateContractCall;
async function CreateMultiContractCall(from, calls, nonce, maxFee, chainId, privateKey) {
    const AAaccount = new account_1.Account(from, (0, encode_1.addHexPrefix)(privateKey));
    const tx = await AAaccount.execute(calls, undefined, {
        nonce: nonce,
        maxFee: maxFee,
        chainId: chainId,
    });
    return { txId: tx.txId, signature: json.stringify(tx.signature) };
}
exports.CreateMultiContractCall = CreateMultiContractCall;
async function signMessageWithTypeData(typedData, privateKey) {
    const publicKey = crypto_lib_1.signUtil.schnorr.stark.getPublicKey(privateKey);
    const starkPub = ec.starkCurve.getStarkKey(privateKey);
    const address = CalculateContractAddressFromHash(starkPub);
    let account = new account_1.Account(address, (0, encode_1.addHexPrefix)(privateKey));
    let sig = await account.signMessage(typedData);
    let hash = await account.hashMessage(typedData);
    return { signature: sig, hash: hash, publicKey: publicKey };
}
exports.signMessageWithTypeData = signMessageWithTypeData;
async function signMessage(message, privateKey) {
    const publicKey = crypto_lib_1.signUtil.schnorr.stark.getPublicKey(privateKey);
    const sig = ec_1.starkCurve.sign(message, privateKey);
    return { signature: sig, hash: message, publicKey: publicKey };
}
exports.signMessage = signMessage;
function verifyMessage(signature, msgHash, publicKey) {
    return crypto_lib_1.signUtil.schnorr.stark.verify(signature, msgHash, publicKey);
}
exports.verifyMessage = verifyMessage;
async function GetRandomPrivateKey() {
    while (true) {
        const randBytes = crypto_lib_1.base.randomBytes(32);
        if (privateKeyVerify(randBytes)) {
            if (testSign(randBytes.toString('hex'))) {
                return `0x${crypto_lib_1.signUtil.schnorr.bytesToHex(randBytes)}`;
            }
        }
    }
}
exports.GetRandomPrivateKey = GetRandomPrivateKey;
function testSign(privateKey) {
    const msg = "7465dd6b1bbffdb05442eb17f5ca38ad1aa78a6f56bf4415bdee219114a47a1";
    const signature = ec.starkCurve.sign(msg, privateKey);
    const pub = crypto_lib_1.signUtil.schnorr.stark.getPublicKey(privateKey);
    return ec.starkCurve.verify(signature, msg, pub);
}
exports.testSign = testSign;
function privateKeyVerify(seckey) {
    const bn = new crypto_lib_1.BN(Array.from(seckey));
    const n = new crypto_lib_1.BN(ec.starkCurve.CURVE.n.toString());
    return bn.cmp(n) < 0 && !bn.isZero();
}
const CURVE_ORDER = BigInt('3618502788666131213697322783095070105526743751716087489154079457884512865583');
function modPrivateKey(privateKey) {
    let key;
    if (!privateKey.startsWith("0x") && !privateKey.startsWith('0X')) {
        key = `0x${privateKey}`;
    }
    else {
        key = privateKey;
    }
    const pk = BigInt(key.toLowerCase());
    const priKey = pk % CURVE_ORDER;
    return "0x" + priKey.toString(16);
}
exports.modPrivateKey = modPrivateKey;
//# sourceMappingURL=index.js.map