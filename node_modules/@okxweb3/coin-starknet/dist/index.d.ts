export * from './signer';
export * from './types';
export * from './utils/hash';
export * from './account';
export * as constants from './constants';
export * as encode from './utils/encode';
export * as hash from './utils/hash';
export * as json from './utils/json';
export * as num from './utils/num';
export * as transaction from './utils/transaction';
export * as stark from './utils/stark';
export * as ec from './utils/ec';
export * as merkle from './utils/merkle';
export * as uint256 from './utils/uint256';
export * as shortString from './utils/shortString';
export * as typedData from './utils/typedData';
export * from './utils/address';
export * from './utils/calldata';
export * from "./StarknetWallet";
import * as num from './utils/num';
export declare const number: typeof num;
import { StarknetChainId } from "./constants";
import { BigNumberish } from "./utils/num";
import { signUtil } from '@okxweb3/crypto-lib';
import { TypedData } from "./utils/typedData";
import { Signature } from "./types";
export declare function CalculateContractAddressFromHash(starkPub: string): string;
export declare function CreateSignedDeployAccountTx(nonce: BigNumberish, maxFee: BigNumberish, chainId: StarknetChainId, privateKey: string): Promise<{
    txId: any;
    signature: string;
}>;
export declare function CreateTransferTx(contractAddress: string, from: string, to: string, amount: BigNumberish, nonce: BigNumberish, maxFee: BigNumberish, chainId: StarknetChainId, privateKey: string): Promise<{
    txId: any;
    signature: string;
}>;
export declare function CreateContractCall(contractAddress: string, from: string, functionName: string, callData: string[], nonce: BigNumberish, maxFee: BigNumberish, chainId: StarknetChainId, privateKey: string): Promise<{
    txId: any;
    signature: string;
}>;
export type Call = {
    contractAddress: string;
    entrypoint: string;
    calldata: string[];
};
export declare function CreateMultiContractCall(from: string, calls: Call[], nonce: BigNumberish, maxFee: BigNumberish, chainId: StarknetChainId, privateKey: string): Promise<{
    txId: any;
    signature: string;
}>;
export declare function signMessageWithTypeData(typedData: TypedData, privateKey: string): Promise<{
    signature: Signature;
    hash: string;
    publicKey: Uint8Array;
}>;
export declare function signMessage(message: string, privateKey: string): Promise<{
    signature: signUtil.schnorr.SignatureType;
    hash: string;
    publicKey: Uint8Array;
}>;
type Hex = Uint8Array | string;
export declare function verifyMessage(signature: Signature | Hex, msgHash: Hex, publicKey: Hex): boolean;
export declare function GetRandomPrivateKey(): Promise<string>;
export declare function testSign(privateKey: string): boolean;
export declare function modPrivateKey(privateKey: string): string;
