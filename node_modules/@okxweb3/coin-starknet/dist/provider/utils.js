"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Block = exports.validBlockTags = exports.txIdentifier = exports.formatHash = void 0;
const num_1 = require("../utils/num");
const index_1 = require("../index");
function formatHash(hashValue) {
    if (typeof hashValue === 'string')
        return hashValue;
    return (0, num_1.toHex)(hashValue);
}
exports.formatHash = formatHash;
function txIdentifier(txHash, txId) {
    if (!txHash) {
        return `transactionId=${index_1.json.stringify(txId)}`;
    }
    const hashString = formatHash(txHash);
    return `transactionHash=${hashString}`;
}
exports.txIdentifier = txIdentifier;
exports.validBlockTags = ['latest', 'pending'];
class Block {
    setIdentifier(__identifier) {
        if (typeof __identifier === 'string' && (0, num_1.isHex)(__identifier)) {
            this.hash = __identifier;
        }
        else if (typeof __identifier === 'bigint') {
            this.hash = (0, num_1.toHex)(__identifier);
        }
        else if (typeof __identifier === 'number') {
            this.number = __identifier;
        }
        else if (typeof __identifier === 'string' && exports.validBlockTags.includes(__identifier)) {
            this.tag = __identifier;
        }
        else {
            this.tag = 'pending';
        }
    }
    constructor(_identifier) {
        this.hash = null;
        this.number = null;
        this.tag = null;
        this.valueOf = () => this.number;
        this.toString = () => this.hash;
        this.setIdentifier(_identifier);
    }
    get queryIdentifier() {
        if (this.number !== null) {
            return `blockNumber=${this.number}`;
        }
        if (this.hash !== null) {
            return `blockHash=${this.hash}`;
        }
        return `blockNumber=${this.tag}`;
    }
    get identifier() {
        if (this.number !== null) {
            return { block_number: this.number };
        }
        if (this.hash !== null) {
            return { block_hash: this.hash };
        }
        return this.tag;
    }
    set identifier(_identifier) {
        this.setIdentifier(_identifier);
    }
    get sequencerIdentifier() {
        return this.hash !== null
            ? { blockHash: this.hash }
            : { blockNumber: (this.number ?? this.tag) };
    }
}
exports.Block = Block;
//# sourceMappingURL=utils.js.map