import { Key } from './types';
export declare const isNegative: (bignum: Uint8Array) => boolean;
export declare const negate: (bignum: Uint8Array) => void;
export declare const decimalToBinary: (size: number, s: string) => Uint8Array;
export declare const signedDecimalToBinary: (size: number, s: string) => Uint8Array;
export declare const binaryToDecimal: (bignum: Uint8Array, minDigits?: number) => string;
export declare const signedBinaryToDecimal: (bignum: Uint8Array, minDigits?: number) => string;
export declare const base58ToBinary: (size: number, s: string) => Uint8Array;
export declare const binaryToBase58: (bignum: Uint8Array, minDigits?: number) => string;
export declare const base64ToBinary: (s: string) => Uint8Array;
export declare const stringToPublicKey: (s: string) => Key;
export declare const publicKeyToLegacyString: (key: Key) => string;
export declare const publicKeyToString: (key: Key) => string;
export declare const convertLegacyPublicKey: (s: string) => string;
export declare const convertLegacyPublicKeys: (keys: string[]) => string[];
export declare const stringToPrivateKey: (s: string) => Key;
export declare const privateKeyToLegacyString: (key: Key) => string;
export declare const privateKeyToString: (key: Key) => string;
export declare const stringToSignature: (s: string) => Key;
export declare const signatureToString: (signature: Key) => string;
export declare const digestFromSerializedData: (chainId: string, serializedTransaction: Uint8Array, serializedContextFreeData?: Uint8Array) => Uint8Array;
export declare function signatureToElliptic(signature: Uint8Array): {
    signatureBytes: Uint8Array;
    recoveryParam: number;
};
