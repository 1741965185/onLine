export interface Action {
    account: string;
    name: string;
    authorization: Authorization[];
    data: any;
    hex_data?: string;
}
export interface Authorization {
    actor: string;
    permission: string;
}
export interface ResourcePayer {
    payer: string;
    max_net_bytes: number;
    max_cpu_us: number;
    max_memory_bytes: number;
}
export interface Transaction {
    expiration?: string;
    ref_block_num?: number;
    ref_block_prefix?: number;
    max_net_usage_words?: number;
    max_cpu_usage_ms?: number;
    delay_sec?: number;
    context_free_actions?: Action[];
    context_free_data?: Uint8Array[];
    actions: Action[];
    transaction_extensions?: [number, string][];
}
export interface TransactConfig {
    privateKeys: string[];
    compression: boolean;
    refBlockNumber: number;
    refBlockId: string;
    refBlockTimestamp: string;
    expireSeconds: number;
    resource_payer?: ResourcePayer;
}
export interface Abi {
    version: string;
    types: {
        new_type_name: string;
        type: string;
    }[];
    structs: {
        name: string;
        base: string;
        fields: {
            name: string;
            type: string;
        }[];
    }[];
    actions: {
        name: string;
        type: string;
        ricardian_contract: string;
    }[];
    tables: {
        name: string;
        type: string;
        index_type: string;
        key_names: string[];
        key_types: string[];
    }[];
    ricardian_clauses: {
        id: string;
        body: string;
    }[];
    error_messages: {
        error_code: number;
        error_msg: string;
    }[];
    abi_extensions: {
        tag: number;
        value: string;
    }[];
    variants?: {
        name: string;
        types: string[];
    }[];
    action_results?: {
        name: string;
        result_type: string;
    }[];
    kv_tables?: {
        [key: string]: {
            type: string;
            primary_index: {
                name: string;
                type: string;
            };
            secondary_indices: {
                [key: string]: {
                    type: string;
                };
            }[];
        };
    }[];
}
export interface TransactionHeader {
    expiration: string;
    ref_block_num: number;
    ref_block_prefix: number;
}
export interface SerializedAction {
    account: string;
    name: string;
    authorization: Authorization[];
    data: string;
}
export declare enum KeyType {
    k1 = 0,
    r1 = 1,
    wa = 2
}
export declare const publicKeyDataSize = 33;
export declare const privateKeyDataSize = 32;
export declare const signatureDataSize = 65;
export interface Key {
    type: KeyType;
    data: Uint8Array;
}
export interface PackedTransaction {
    signatures: string[];
    compression: boolean;
    packed_context_free_data: string;
    packed_trx: string;
}
export interface BlockTaposInfo {
    block_num: number;
    id: string;
    timestamp: string;
}
