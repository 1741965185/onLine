import { Contract, SerialBuffer, Type } from './serialize';
import { Abi, Action, PackedTransaction, ResourcePayer, SerializedAction, TransactConfig, Transaction } from './types';
export declare class TxBuilder {
    abiTypes: Map<string, Type>;
    transactionTypes: Map<string, Type>;
    chainId: string;
    constructor(chainId: string);
    getTransactionAbiMap(transaction: Transaction, abiMap: Map<string, string>): Map<string, Abi>;
    serializeTransactionExtensions(transaction: Transaction, resource_payer?: ResourcePayer): [number, string][];
    serializeActions(actions: Action[], abiMap: Map<string, Abi>): SerializedAction[];
    getContract(abi: Abi): Contract;
    rawAbiToJson(rawAbi: Uint8Array): Abi;
    serializeTransaction(transaction: Transaction): Uint8Array;
    serialize(buffer: SerialBuffer, type: string, value: any): void;
    serializeContextFreeData(contextFreeData?: Uint8Array[]): Uint8Array | undefined;
    deflateSerializedArray(serializedArray: Uint8Array): Uint8Array;
    build(transaction: Transaction, config: TransactConfig, abiMap: Map<string, string>): PackedTransaction;
    sign(privateKeys: string[], serializedTransaction: Uint8Array, serializedContextFreeData?: Uint8Array): string[];
}
