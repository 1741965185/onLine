import { BaseWallet, CalcTxHashParams, DerivePriKeyParams, GetDerivedPathParam, NewAddressParams, SignTxParams, ValidAddressParams, ValidSignedTransactionParams, ValidPrivateKeyParams } from "@okxweb3/coin-base";
export type AptosParam = {
    type: "transfer" | "tokenTransfer" | "tokenMint" | "tokenBurn" | "tokenRegister" | "dapp" | "simulate" | "offerNft" | "offerNftObject" | "claimNft" | "offerNft_simulate" | "claimNft_simulate" | "simple_transaction" | "simulate_simple_transaction" | "fungible_asset_transfer" | "simulate_fungible_asset_transfer";
    base: AptosBasePram;
    data: any;
};
export type AptosTransferParam = {
    recipientAddress: string;
    amount: string;
};
export type AptosTokenMintParam = {
    tyArg: string;
    recipientAddress: string;
    amount: string;
};
export type AptosTokenBurnParam = {
    tyArg: string;
    amount: string;
};
export type AptosTokenRegisterParam = {
    tyArg: string;
};
export type AptosTokenTransferParam = {
    tyArg: string;
    recipientAddress: string;
    amount: string;
};
export type AptosCustomParam = {
    abi: string;
    data: string;
    type: number;
};
export type AptosOfferNFTParam = {
    receiver: string;
    creator: string;
    collectionName: string;
    tokenName: string;
    version: string;
    amount: string;
};
export type AptosOfferNFTObjectParam = {
    nftObject: string;
    receiver: string;
    amount: string;
};
export type AptosClaimNFTParam = {
    sender: string;
    creator: string;
    collectionName: string;
    tokenName: string;
    version: string;
};
export type AptosSimpleTransactionParam = {
    tyArg: Array<any>;
    function: `${string}::${string}::${string}`;
    functionArguments: Array<any>;
    recipientAddress: string;
    amount: string;
    moveModule: string;
    rawTransaction: string;
    feePayerAddress: string;
    withFeePayer: boolean;
    signAsFeePayer: boolean;
};
export type AptosFungibleTokenTransferParam = {
    recipientAddress: string;
    amount: string;
    fungibleAssetMetadataAddress: string;
};
export type AptosBasePram = {
    sender?: string;
    sequenceNumber: string;
    chainId: number;
    maxGasAmount: string;
    gasUnitPrice: string;
    expirationTimestampSecs: string;
};
export type SignMessagePayload = {
    address?: boolean;
    application?: boolean;
    dAppDomain?: string;
    chainId?: boolean;
    chain_id?: number;
    message: string;
    nonce: string;
};
export type SignMessageByPayloadResponse = {
    address?: string;
    application?: string;
    chainId?: number;
    fullMessage: string;
    message: string;
    nonce: string;
    prefix: string;
    signature: string;
    bitmap?: Uint8Array;
};
export type SignMessageByPayloadParams = {
    privateKey: string;
    data: any;
};
export declare class AptosWallet extends BaseWallet {
    getDerivedPath(param: GetDerivedPathParam): Promise<any>;
    getRandomPrivateKey(): Promise<any>;
    getDerivedPrivateKey(param: DerivePriKeyParams): Promise<any>;
    checkPrivateKey(privateKey: string): boolean;
    GetTransactionHash(txHex: string): string;
    getNewAddress(param: NewAddressParams): Promise<any>;
    validPrivateKey(param: ValidPrivateKeyParams): Promise<any>;
    signTransaction(param: SignTxParams): Promise<any>;
    validAddress(param: ValidAddressParams): Promise<any>;
    signMessage(param: SignTxParams): Promise<string>;
    signMessageByPayload(param: SignMessageByPayloadParams): Promise<any>;
    calcTxHash(param: CalcTxHashParams): Promise<string>;
    validSignedTransaction(param: ValidSignedTransactionParams): Promise<any>;
}
