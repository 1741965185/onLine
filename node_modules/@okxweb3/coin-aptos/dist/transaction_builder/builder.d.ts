import { Ed25519Signature, MultiEd25519PublicKey, MultiEd25519Signature, RawTransaction, SignedTransaction, SigningMessage, MultiAgentRawTransaction, AccountAddress, TransactionPayload } from './aptos_types';
import { Bytes, Uint64, Uint8 } from './bcs';
import { MaybeHexString } from '../hex_string';
import { EntryFunctionId, MoveFunction, MoveModuleBytecode, MoveType } from './move_types';
import * as Gen from "./move_types";
export type AnyRawTransaction = RawTransaction | MultiAgentRawTransaction;
export type SigningFn = (txn: SigningMessage) => Ed25519Signature | MultiEd25519Signature;
export declare class TransactionBuilder<F extends SigningFn> {
    readonly rawTxnBuilder?: TransactionBuilderABI | undefined;
    protected readonly signingFunction: F;
    constructor(signingFunction: F, rawTxnBuilder?: TransactionBuilderABI | undefined);
    build(func: string, ty_tags: string[], args: any[]): RawTransaction;
    static getSigningMessage(rawTxn: AnyRawTransaction): SigningMessage;
}
export declare class TransactionBuilderEd25519 extends TransactionBuilder<SigningFn> {
    private readonly publicKey;
    constructor(signingFunction: SigningFn, publicKey: Uint8Array, rawTxnBuilder?: TransactionBuilderABI);
    rawToSigned(rawTxn: RawTransaction): SignedTransaction;
    sign(rawTxn: RawTransaction): Bytes;
}
export declare class TransactionBuilderMultiEd25519 extends TransactionBuilder<SigningFn> {
    private readonly publicKey;
    constructor(signingFunction: SigningFn, publicKey: MultiEd25519PublicKey);
    rawToSigned(rawTxn: RawTransaction): SignedTransaction;
    sign(rawTxn: RawTransaction): Bytes;
}
export interface ABIBuilderConfig {
    sender: MaybeHexString | AccountAddress;
    sequenceNumber: Uint64 | string;
    gasUnitPrice: Uint64 | string;
    maxGasAmount?: Uint64 | string;
    expSecFromNow?: number | string;
    chainId: Uint8 | string;
}
export declare class TransactionBuilderABI {
    private readonly abiMap;
    private readonly builderConfig;
    constructor(abis: Bytes[], builderConfig?: ABIBuilderConfig);
    private static toBCSArgs;
    private static toTransactionArguments;
    setSequenceNumber(seqNumber: Uint64 | string): void;
    buildTransactionPayload(func: string, ty_tags: string[], args: any[]): TransactionPayload;
    build(func: string, ty_tags: string[], args: any[]): RawTransaction;
}
export type RemoteABIBuilderConfig = Partial<Omit<ABIBuilderConfig, "sender">> & {
    sender: MaybeHexString | AccountAddress;
};
export interface AptosClientInterface {
    getAccountModules: (accountAddress: MaybeHexString) => Promise<Gen.MoveModuleBytecode[]>;
    getAccount: (accountAddress: MaybeHexString) => Promise<Gen.AccountData>;
    getChainId: () => Promise<number>;
    estimateGasPrice: () => Promise<Gen.GasEstimation>;
}
export declare function fetchABI(modules: MoveModuleBytecode[]): Map<string, MoveFunction & {
    fullName: string;
}>;
export declare function buildRawTransactionByABI(modules: MoveModuleBytecode[], builderConfig: ABIBuilderConfig, func: EntryFunctionId, ty_tags: MoveType[], args: any[]): RawTransaction;
