export type EntryFunctionId = string;
export type MoveType = string;
export type IdentifierWrapper = string;
export type MoveModuleId = string;
export declare enum MoveFunctionVisibility {
    PRIVATE = "private",
    PUBLIC = "public",
    FRIEND = "friend"
}
export type MoveFunctionGenericTypeParam = {
    constraints: Array<MoveAbility>;
};
export type MoveFunction = {
    name: IdentifierWrapper;
    visibility: MoveFunctionVisibility;
    is_entry: boolean;
    is_view: boolean;
    generic_type_params: Array<MoveFunctionGenericTypeParam>;
    params: Array<MoveType>;
    return: Array<MoveType>;
};
export type MoveModule = {
    address: Address;
    name: IdentifierWrapper;
    friends: Array<MoveModuleId>;
    exposed_functions: Array<MoveFunction>;
    structs: Array<MoveStruct>;
};
export type MoveStruct = {
    name: IdentifierWrapper;
    is_native: boolean;
    abilities: Array<MoveAbility>;
    generic_type_params: Array<MoveStructGenericTypeParam>;
    fields: Array<MoveStructField>;
};
export type MoveStructField = {
    name: IdentifierWrapper;
    type: MoveType;
};
export type MoveStructGenericTypeParam = {
    constraints: Array<MoveAbility>;
};
export type MoveAbility = string;
export type Address = string;
export type HexEncodedBytes = string;
export type MoveModuleBytecode = {
    bytecode: HexEncodedBytes;
    abi?: MoveModule;
};
export type MoveStructValue = {};
export type U64 = string;
export type AccountData = {
    sequence_number: U64;
    authentication_key: HexEncodedBytes;
};
export type GasEstimation = {
    deprioritized_gas_estimate?: number;
    gas_estimate: number;
    prioritized_gas_estimate?: number;
};
