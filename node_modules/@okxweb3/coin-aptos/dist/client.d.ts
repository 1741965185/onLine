import { HexString } from './hex_string';
import { AptosAccount } from './aptos_account';
import { TxnBuilderTypes } from './transaction_builder';
import { TransactionPayload } from './transaction_builder/aptos_types';
import { AnyNumber, Uint64, Uint8 } from './transaction_builder/bcs';
export declare function transfer(account: AptosAccount, recipientAddress: string | HexString, amount: AnyNumber, sequenceNumber: Uint64, chainId: Uint8, maxGasAmount: Uint64, gasUnitPrice: Uint64, expirationTimestampSecs: Uint64): Uint8Array;
export declare function createRawTransaction(sender: HexString, payload: TransactionPayload, sequenceNumber: Uint64, chainId: Uint8, maxGasAmount: Uint64, gasUnitPrice: Uint64, expirationTimestampSecs: Uint64): TxnBuilderTypes.RawTransaction;
export declare function simulateTransaction(account: AptosAccount, payload: TransactionPayload, sequenceNumber: Uint64, chainId: Uint8, maxGasAmount: Uint64, gasUnitPrice: Uint64, expirationTimestampSecs: Uint64): Uint8Array;
export declare function transferPayload(recipientAddress: string | HexString, amount: AnyNumber): TxnBuilderTypes.TransactionPayloadEntryFunction;
export declare function registerCoin(tyArg: string): TxnBuilderTypes.TransactionPayloadEntryFunction;
export declare function mintCoin(tyArg: string, receiverAddress: string, amount: AnyNumber): TxnBuilderTypes.TransactionPayloadEntryFunction;
export declare function burnCoin(tyArg: string, amount: AnyNumber): TxnBuilderTypes.TransactionPayloadEntryFunction;
export declare function transferCoin(tyArg: string, receiverAddress: string, amount: AnyNumber): TxnBuilderTypes.TransactionPayloadEntryFunction;
export declare function createNFTCollectionPayload(name: string, description: string, uri: string): TxnBuilderTypes.TransactionPayloadEntryFunction;
export declare function createNFTTokenPayload(account: AptosAccount, collection_name: string, name: string, description: string, supply: number | bigint, uri: string): TxnBuilderTypes.TransactionPayloadEntryFunction;
export declare function offerNFTTokenPayload(receiver: HexString, creator: HexString, collection_name: string, token_name: string, version: bigint, amount: bigint): TxnBuilderTypes.TransactionPayloadEntryFunction;
export declare function offerNFTTokenPayloadObject(nftObject: HexString, receiver: HexString, amount: bigint): TxnBuilderTypes.TransactionPayloadEntryFunction;
export declare function claimNFTTokenPayload(sender: HexString, creator: HexString, collection_name: string, token_name: string, version: bigint): TxnBuilderTypes.TransactionPayloadEntryFunction;
export declare function generateBCSTransaction(accountFrom: AptosAccount, rawTxn: TxnBuilderTypes.RawTransaction): Uint8Array;
export declare function generateBCSSimulateTransaction(accountFrom: AptosAccount, rawTxn: TxnBuilderTypes.RawTransaction): Uint8Array;
export declare function createRawTransactionByABI(sender: HexString, sequenceNumber: Uint64, chainId: Uint8, maxGasAmount: Uint64, gasUnitPrice: Uint64, expirationTimestampSecs: Uint64, callData: string, moduleAbi: string): TxnBuilderTypes.RawTransaction;
export declare function signMessage(message: string, privateKey: string): Promise<string>;
export declare function validSignedTransaction(tx: string, skipCheckSig: boolean): TxnBuilderTypes.SignedTransaction;
