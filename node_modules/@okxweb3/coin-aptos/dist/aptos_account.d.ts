import { HexString, MaybeHexString } from "./hex_string";
import { MoveTypes } from "./transaction_builder";
import nacl from "tweetnacl";
export interface AptosAccountObject {
    address?: MoveTypes.HexEncodedBytes;
    publicKeyHex?: MoveTypes.HexEncodedBytes;
    privateKeyHex: MoveTypes.HexEncodedBytes;
}
export declare class AptosAccount {
    readonly signingKey: nacl.SignKeyPair;
    private readonly accountAddress;
    static fromAptosAccountObject(obj: AptosAccountObject): AptosAccount;
    static fromPrivateKey(privateKey: HexString): AptosAccount;
    static isValidPath(path: string): boolean;
    static fromDerivePath(path: string, mnemonics: string): AptosAccount;
    constructor(privateKeyBytes?: Uint8Array | undefined, address?: MaybeHexString);
    address(): HexString;
    authKey(): HexString;
    static getResourceAccountAddress(sourceAddress: MaybeHexString, seed: Uint8Array): HexString;
    static getCollectionID(creatorAddress: MaybeHexString, collectionName: string): HexString;
    pubKey(): HexString;
    signBuffer(buffer: Uint8Array): HexString;
    signHexString(hexString: MaybeHexString): HexString;
    verifySignature(message: MaybeHexString, signature: MaybeHexString): boolean;
    toPrivateKeyObject(): AptosAccountObject;
}
export declare function getAddressFromAccountOrAddress(accountOrAddress: AptosAccount | MaybeHexString): HexString;
