import { Account } from "./Account";
import { MultiKey, MultiKeySignature, PublicKey } from "../core/crypto";
import { AccountAddress } from "../core/accountAddress";
import { HexInput, SigningScheme } from "../types";
import { AccountAuthenticatorMultiKey } from "../transactions/authenticator/account";
import { AnyRawTransaction } from "../transactions/types";
export interface VerifyMultiKeySignatureArgs {
    message: HexInput;
    signature: MultiKeySignature;
}
export declare class MultiKeyAccount implements Account {
    readonly publicKey: MultiKey;
    readonly accountAddress: AccountAddress;
    readonly signingScheme: SigningScheme;
    readonly signers: Account[];
    readonly signerIndicies: number[];
    readonly signaturesBitmap: Uint8Array;
    constructor(args: {
        multiKey: MultiKey;
        signers: Account[];
    });
    static fromPublicKeysAndSigners(args: {
        publicKeys: PublicKey[];
        signaturesRequired: number;
        signers: Account[];
    }): MultiKeyAccount;
    static isMultiKeySigner(account: Account): account is MultiKeyAccount;
    signWithAuthenticator(message: HexInput): AccountAuthenticatorMultiKey;
    signTransactionWithAuthenticator(transaction: AnyRawTransaction): AccountAuthenticatorMultiKey;
    sign(data: HexInput): MultiKeySignature;
    signTransaction(transaction: AnyRawTransaction): MultiKeySignature;
    verifySignature(args: VerifyMultiKeySignatureArgs): boolean;
}
