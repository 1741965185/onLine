import { AccountAuthenticatorEd25519 } from "../transactions/authenticator/account";
import { HexInput, SigningScheme } from "../types";
import { AccountAddress, AccountAddressInput } from "../core/accountAddress";
import { Ed25519PrivateKey, Ed25519PublicKey, Ed25519Signature } from "../core/crypto";
import type { Account } from "./Account";
import { AnyRawTransaction } from "../transactions/types";
export interface Ed25519SignerConstructorArgs {
    privateKey: Ed25519PrivateKey;
    address?: AccountAddressInput;
}
export interface Ed25519SignerFromDerivationPathArgs {
    path: string;
    mnemonic: string;
}
export interface VerifyEd25519SignatureArgs {
    message: HexInput;
    signature: Ed25519Signature;
}
export declare class Ed25519Account implements Account {
    readonly privateKey: Ed25519PrivateKey;
    readonly publicKey: Ed25519PublicKey;
    readonly accountAddress: AccountAddress;
    readonly signingScheme = SigningScheme.Ed25519;
    constructor(args: Ed25519SignerConstructorArgs);
    static generate(): Ed25519Account;
    static fromDerivationPath(args: Ed25519SignerFromDerivationPathArgs): Ed25519Account;
    verifySignature(args: VerifyEd25519SignatureArgs): boolean;
    signWithAuthenticator(message: HexInput): AccountAuthenticatorEd25519;
    signTransactionWithAuthenticator(transaction: AnyRawTransaction): AccountAuthenticatorEd25519;
    sign(message: HexInput): Ed25519Signature;
    signTransaction(transaction: AnyRawTransaction): Ed25519Signature;
}
