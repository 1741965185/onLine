import { AccountAuthenticatorSingleKey } from "../transactions/authenticator/account";
import { type HexInput, SigningScheme, SigningSchemeInput } from "../types";
import { AccountAddress, AccountAddressInput } from "../core/accountAddress";
import { AnyPublicKey, AnySignature, PrivateKey } from "../core/crypto";
import type { Account } from "./Account";
import { AnyRawTransaction } from "../transactions/types";
export interface SingleKeySignerConstructorArgs {
    privateKey: PrivateKey;
    address?: AccountAddressInput;
}
export interface SingleKeySignerGenerateArgs {
    scheme?: SigningSchemeInput;
}
export type SingleKeySignerFromDerivationPathArgs = SingleKeySignerGenerateArgs & {
    path: string;
    mnemonic: string;
};
export interface VerifySingleKeySignatureArgs {
    message: HexInput;
    signature: AnySignature;
}
export declare class SingleKeyAccount implements Account {
    readonly privateKey: PrivateKey;
    readonly publicKey: AnyPublicKey;
    readonly accountAddress: AccountAddress;
    readonly signingScheme = SigningScheme.SingleKey;
    constructor(args: SingleKeySignerConstructorArgs);
    static generate(args?: SingleKeySignerGenerateArgs): SingleKeyAccount;
    static fromDerivationPath(args: SingleKeySignerFromDerivationPathArgs): SingleKeyAccount;
    verifySignature(args: VerifySingleKeySignatureArgs): boolean;
    signWithAuthenticator(message: HexInput): AccountAuthenticatorSingleKey;
    signTransactionWithAuthenticator(transaction: AnyRawTransaction): AccountAuthenticatorSingleKey;
    sign(message: HexInput): AnySignature;
    signTransaction(transaction: AnyRawTransaction): AnySignature;
}
