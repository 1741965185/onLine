"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeePayerRawTransaction = exports.MultiAgentRawTransaction = exports.RawTransactionWithData = exports.RawTransaction = void 0;
const serializer_1 = require("../../bcs/serializer");
const chainId_1 = require("./chainId");
const core_1 = require("../../core");
const transactionPayload_1 = require("./transactionPayload");
const types_1 = require("../../types");
class RawTransaction extends serializer_1.Serializable {
    constructor(sender, sequence_number, payload, max_gas_amount, gas_unit_price, expiration_timestamp_secs, chain_id) {
        super();
        this.sender = sender;
        this.sequence_number = sequence_number;
        this.payload = payload;
        this.max_gas_amount = max_gas_amount;
        this.gas_unit_price = gas_unit_price;
        this.expiration_timestamp_secs = expiration_timestamp_secs;
        this.chain_id = chain_id;
    }
    serialize(serializer) {
        this.sender.serialize(serializer);
        serializer.serializeU64(this.sequence_number);
        this.payload.serialize(serializer);
        serializer.serializeU64(this.max_gas_amount);
        serializer.serializeU64(this.gas_unit_price);
        serializer.serializeU64(this.expiration_timestamp_secs);
        this.chain_id.serialize(serializer);
    }
    static deserialize(deserializer) {
        const sender = core_1.AccountAddress.deserialize(deserializer);
        const sequence_number = deserializer.deserializeU64();
        const payload = transactionPayload_1.TransactionPayload.deserialize(deserializer);
        const max_gas_amount = deserializer.deserializeU64();
        const gas_unit_price = deserializer.deserializeU64();
        const expiration_timestamp_secs = deserializer.deserializeU64();
        const chain_id = chainId_1.ChainId.deserialize(deserializer);
        return new RawTransaction(sender, sequence_number, payload, max_gas_amount, gas_unit_price, expiration_timestamp_secs, chain_id);
    }
}
exports.RawTransaction = RawTransaction;
class RawTransactionWithData extends serializer_1.Serializable {
    static deserialize(deserializer) {
        const index = deserializer.deserializeUleb128AsU32();
        switch (index) {
            case types_1.TransactionVariants.MultiAgentTransaction:
                return MultiAgentRawTransaction.load(deserializer);
            case types_1.TransactionVariants.FeePayerTransaction:
                return FeePayerRawTransaction.load(deserializer);
            default:
                throw new Error(`Unknown variant index for RawTransactionWithData: ${index}`);
        }
    }
}
exports.RawTransactionWithData = RawTransactionWithData;
class MultiAgentRawTransaction extends RawTransactionWithData {
    constructor(raw_txn, secondary_signer_addresses) {
        super();
        this.raw_txn = raw_txn;
        this.secondary_signer_addresses = secondary_signer_addresses;
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TransactionVariants.MultiAgentTransaction);
        this.raw_txn.serialize(serializer);
        serializer.serializeVector(this.secondary_signer_addresses);
    }
    static load(deserializer) {
        const rawTxn = RawTransaction.deserialize(deserializer);
        const secondarySignerAddresses = deserializer.deserializeVector(core_1.AccountAddress);
        return new MultiAgentRawTransaction(rawTxn, secondarySignerAddresses);
    }
}
exports.MultiAgentRawTransaction = MultiAgentRawTransaction;
class FeePayerRawTransaction extends RawTransactionWithData {
    constructor(raw_txn, secondary_signer_addresses, fee_payer_address) {
        super();
        this.raw_txn = raw_txn;
        this.secondary_signer_addresses = secondary_signer_addresses;
        this.fee_payer_address = fee_payer_address;
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TransactionVariants.FeePayerTransaction);
        this.raw_txn.serialize(serializer);
        serializer.serializeVector(this.secondary_signer_addresses);
        this.fee_payer_address.serialize(serializer);
    }
    static load(deserializer) {
        const rawTxn = RawTransaction.deserialize(deserializer);
        const secondarySignerAddresses = deserializer.deserializeVector(core_1.AccountAddress);
        const feePayerAddress = core_1.AccountAddress.deserialize(deserializer);
        return new FeePayerRawTransaction(rawTxn, secondarySignerAddresses, feePayerAddress);
    }
}
exports.FeePayerRawTransaction = FeePayerRawTransaction;
//# sourceMappingURL=rawTransaction.js.map