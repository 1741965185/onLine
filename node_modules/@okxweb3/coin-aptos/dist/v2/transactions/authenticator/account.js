"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountAuthenticatorMultiKey = exports.AccountAuthenticatorSingleKey = exports.AccountAuthenticatorMultiEd25519 = exports.AccountAuthenticatorEd25519 = exports.AccountAuthenticator = void 0;
const bcs_1 = require("../../bcs");
const crypto_1 = require("../../core/crypto");
const ed25519_1 = require("../../core/crypto/ed25519");
const multiEd25519_1 = require("../../core/crypto/multiEd25519");
const multiKey_1 = require("../../core/crypto/multiKey");
const types_1 = require("../../types");
class AccountAuthenticator extends bcs_1.Serializable {
    static deserialize(deserializer) {
        const index = deserializer.deserializeUleb128AsU32();
        switch (index) {
            case types_1.AccountAuthenticatorVariant.Ed25519:
                return AccountAuthenticatorEd25519.load(deserializer);
            case types_1.AccountAuthenticatorVariant.MultiEd25519:
                return AccountAuthenticatorMultiEd25519.load(deserializer);
            case types_1.AccountAuthenticatorVariant.SingleKey:
                return AccountAuthenticatorSingleKey.load(deserializer);
            case types_1.AccountAuthenticatorVariant.MultiKey:
                return AccountAuthenticatorMultiKey.load(deserializer);
            default:
                throw new Error(`Unknown variant index for AccountAuthenticator: ${index}`);
        }
    }
    isEd25519() {
        return this instanceof AccountAuthenticatorEd25519;
    }
    isMultiEd25519() {
        return this instanceof AccountAuthenticatorMultiEd25519;
    }
    isSingleKey() {
        return this instanceof AccountAuthenticatorSingleKey;
    }
    isMultiKey() {
        return this instanceof AccountAuthenticatorMultiKey;
    }
}
exports.AccountAuthenticator = AccountAuthenticator;
class AccountAuthenticatorEd25519 extends AccountAuthenticator {
    constructor(public_key, signature) {
        super();
        this.public_key = public_key;
        this.signature = signature;
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.AccountAuthenticatorVariant.Ed25519);
        this.public_key.serialize(serializer);
        this.signature.serialize(serializer);
    }
    static load(deserializer) {
        const public_key = ed25519_1.Ed25519PublicKey.deserialize(deserializer);
        const signature = ed25519_1.Ed25519Signature.deserialize(deserializer);
        return new AccountAuthenticatorEd25519(public_key, signature);
    }
}
exports.AccountAuthenticatorEd25519 = AccountAuthenticatorEd25519;
class AccountAuthenticatorMultiEd25519 extends AccountAuthenticator {
    constructor(public_key, signature) {
        super();
        this.public_key = public_key;
        this.signature = signature;
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.AccountAuthenticatorVariant.MultiEd25519);
        this.public_key.serialize(serializer);
        this.signature.serialize(serializer);
    }
    static load(deserializer) {
        const public_key = multiEd25519_1.MultiEd25519PublicKey.deserialize(deserializer);
        const signature = multiEd25519_1.MultiEd25519Signature.deserialize(deserializer);
        return new AccountAuthenticatorMultiEd25519(public_key, signature);
    }
}
exports.AccountAuthenticatorMultiEd25519 = AccountAuthenticatorMultiEd25519;
class AccountAuthenticatorSingleKey extends AccountAuthenticator {
    constructor(public_key, signature) {
        super();
        this.public_key = public_key;
        this.signature = signature;
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.AccountAuthenticatorVariant.SingleKey);
        this.public_key.serialize(serializer);
        this.signature.serialize(serializer);
    }
    static load(deserializer) {
        const public_key = crypto_1.AnyPublicKey.deserialize(deserializer);
        const signature = crypto_1.AnySignature.deserialize(deserializer);
        return new AccountAuthenticatorSingleKey(public_key, signature);
    }
}
exports.AccountAuthenticatorSingleKey = AccountAuthenticatorSingleKey;
class AccountAuthenticatorMultiKey extends AccountAuthenticator {
    constructor(public_keys, signatures) {
        super();
        this.public_keys = public_keys;
        this.signatures = signatures;
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.AccountAuthenticatorVariant.MultiKey);
        this.public_keys.serialize(serializer);
        this.signatures.serialize(serializer);
    }
    static load(deserializer) {
        const public_keys = multiKey_1.MultiKey.deserialize(deserializer);
        const signatures = multiKey_1.MultiKeySignature.deserialize(deserializer);
        return new AccountAuthenticatorMultiKey(public_keys, signatures);
    }
}
exports.AccountAuthenticatorMultiKey = AccountAuthenticatorMultiKey;
//# sourceMappingURL=account.js.map