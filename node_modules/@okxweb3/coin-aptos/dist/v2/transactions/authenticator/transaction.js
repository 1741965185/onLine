"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionAuthenticatorSingleSender = exports.TransactionAuthenticatorFeePayer = exports.TransactionAuthenticatorMultiAgent = exports.TransactionAuthenticatorMultiEd25519 = exports.TransactionAuthenticatorEd25519 = exports.TransactionAuthenticator = void 0;
const account_1 = require("./account");
const bcs_1 = require("../../bcs");
const core_1 = require("../../core");
const ed25519_1 = require("../../core/crypto/ed25519");
const multiEd25519_1 = require("../../core/crypto/multiEd25519");
const types_1 = require("../../types");
class TransactionAuthenticator extends bcs_1.Serializable {
    static deserialize(deserializer) {
        const index = deserializer.deserializeUleb128AsU32();
        switch (index) {
            case types_1.TransactionAuthenticatorVariant.Ed25519:
                return TransactionAuthenticatorEd25519.load(deserializer);
            case types_1.TransactionAuthenticatorVariant.MultiEd25519:
                return TransactionAuthenticatorMultiEd25519.load(deserializer);
            case types_1.TransactionAuthenticatorVariant.MultiAgent:
                return TransactionAuthenticatorMultiAgent.load(deserializer);
            case types_1.TransactionAuthenticatorVariant.FeePayer:
                return TransactionAuthenticatorFeePayer.load(deserializer);
            case types_1.TransactionAuthenticatorVariant.SingleSender:
                return TransactionAuthenticatorSingleSender.load(deserializer);
            default:
                throw new Error(`Unknown variant index for TransactionAuthenticator: ${index}`);
        }
    }
}
exports.TransactionAuthenticator = TransactionAuthenticator;
class TransactionAuthenticatorEd25519 extends TransactionAuthenticator {
    constructor(public_key, signature) {
        super();
        this.public_key = public_key;
        this.signature = signature;
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TransactionAuthenticatorVariant.Ed25519);
        this.public_key.serialize(serializer);
        this.signature.serialize(serializer);
    }
    static load(deserializer) {
        const public_key = ed25519_1.Ed25519PublicKey.deserialize(deserializer);
        const signature = ed25519_1.Ed25519Signature.deserialize(deserializer);
        return new TransactionAuthenticatorEd25519(public_key, signature);
    }
}
exports.TransactionAuthenticatorEd25519 = TransactionAuthenticatorEd25519;
class TransactionAuthenticatorMultiEd25519 extends TransactionAuthenticator {
    constructor(public_key, signature) {
        super();
        this.public_key = public_key;
        this.signature = signature;
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TransactionAuthenticatorVariant.MultiEd25519);
        this.public_key.serialize(serializer);
        this.signature.serialize(serializer);
    }
    static load(deserializer) {
        const public_key = multiEd25519_1.MultiEd25519PublicKey.deserialize(deserializer);
        const signature = multiEd25519_1.MultiEd25519Signature.deserialize(deserializer);
        return new TransactionAuthenticatorMultiEd25519(public_key, signature);
    }
}
exports.TransactionAuthenticatorMultiEd25519 = TransactionAuthenticatorMultiEd25519;
class TransactionAuthenticatorMultiAgent extends TransactionAuthenticator {
    constructor(sender, secondary_signer_addresses, secondary_signers) {
        super();
        this.sender = sender;
        this.secondary_signer_addresses = secondary_signer_addresses;
        this.secondary_signers = secondary_signers;
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TransactionAuthenticatorVariant.MultiAgent);
        this.sender.serialize(serializer);
        serializer.serializeVector(this.secondary_signer_addresses);
        serializer.serializeVector(this.secondary_signers);
    }
    static load(deserializer) {
        const sender = account_1.AccountAuthenticator.deserialize(deserializer);
        const secondary_signer_addresses = deserializer.deserializeVector(core_1.AccountAddress);
        const secondary_signers = deserializer.deserializeVector(account_1.AccountAuthenticator);
        return new TransactionAuthenticatorMultiAgent(sender, secondary_signer_addresses, secondary_signers);
    }
}
exports.TransactionAuthenticatorMultiAgent = TransactionAuthenticatorMultiAgent;
class TransactionAuthenticatorFeePayer extends TransactionAuthenticator {
    constructor(sender, secondary_signer_addresses, secondary_signers, fee_payer) {
        super();
        this.sender = sender;
        this.secondary_signer_addresses = secondary_signer_addresses;
        this.secondary_signers = secondary_signers;
        this.fee_payer = fee_payer;
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TransactionAuthenticatorVariant.FeePayer);
        this.sender.serialize(serializer);
        serializer.serializeVector(this.secondary_signer_addresses);
        serializer.serializeVector(this.secondary_signers);
        this.fee_payer.address.serialize(serializer);
        this.fee_payer.authenticator.serialize(serializer);
    }
    static load(deserializer) {
        const sender = account_1.AccountAuthenticator.deserialize(deserializer);
        const secondary_signer_addresses = deserializer.deserializeVector(core_1.AccountAddress);
        const secondary_signers = deserializer.deserializeVector(account_1.AccountAuthenticator);
        const address = core_1.AccountAddress.deserialize(deserializer);
        const authenticator = account_1.AccountAuthenticator.deserialize(deserializer);
        const fee_payer = { address, authenticator };
        return new TransactionAuthenticatorFeePayer(sender, secondary_signer_addresses, secondary_signers, fee_payer);
    }
}
exports.TransactionAuthenticatorFeePayer = TransactionAuthenticatorFeePayer;
class TransactionAuthenticatorSingleSender extends TransactionAuthenticator {
    constructor(sender) {
        super();
        this.sender = sender;
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TransactionAuthenticatorVariant.SingleSender);
        this.sender.serialize(serializer);
    }
    static load(deserializer) {
        const sender = account_1.AccountAuthenticator.deserialize(deserializer);
        return new TransactionAuthenticatorSingleSender(sender);
    }
}
exports.TransactionAuthenticatorSingleSender = TransactionAuthenticatorSingleSender;
//# sourceMappingURL=transaction.js.map