"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.objectStructTag = exports.optionStructTag = exports.stringStructTag = exports.aptosCoinStructTag = exports.StructTag = exports.TypeTagStruct = exports.TypeTagVector = exports.TypeTagGeneric = exports.TypeTagReference = exports.TypeTagSigner = exports.TypeTagAddress = exports.TypeTagU256 = exports.TypeTagU128 = exports.TypeTagU64 = exports.TypeTagU32 = exports.TypeTagU16 = exports.TypeTagU8 = exports.TypeTagBool = exports.TypeTag = void 0;
const serializer_1 = require("../../bcs/serializer");
const core_1 = require("../../core");
const identifier_1 = require("../instances/identifier");
const types_1 = require("../../types");
class TypeTag extends serializer_1.Serializable {
    static deserialize(deserializer) {
        const index = deserializer.deserializeUleb128AsU32();
        switch (index) {
            case types_1.TypeTagVariants.Bool:
                return TypeTagBool.load(deserializer);
            case types_1.TypeTagVariants.U8:
                return TypeTagU8.load(deserializer);
            case types_1.TypeTagVariants.U64:
                return TypeTagU64.load(deserializer);
            case types_1.TypeTagVariants.U128:
                return TypeTagU128.load(deserializer);
            case types_1.TypeTagVariants.Address:
                return TypeTagAddress.load(deserializer);
            case types_1.TypeTagVariants.Signer:
                return TypeTagSigner.load(deserializer);
            case types_1.TypeTagVariants.Vector:
                return TypeTagVector.load(deserializer);
            case types_1.TypeTagVariants.Struct:
                return TypeTagStruct.load(deserializer);
            case types_1.TypeTagVariants.U16:
                return TypeTagU16.load(deserializer);
            case types_1.TypeTagVariants.U32:
                return TypeTagU32.load(deserializer);
            case types_1.TypeTagVariants.U256:
                return TypeTagU256.load(deserializer);
            case types_1.TypeTagVariants.Generic:
                return TypeTagGeneric.load(deserializer);
            default:
                throw new Error(`Unknown variant index for TypeTag: ${index}`);
        }
    }
    isBool() {
        return this instanceof TypeTagBool;
    }
    isAddress() {
        return this instanceof TypeTagAddress;
    }
    isGeneric() {
        return this instanceof TypeTagGeneric;
    }
    isSigner() {
        return this instanceof TypeTagSigner;
    }
    isVector() {
        return this instanceof TypeTagVector;
    }
    isStruct() {
        return this instanceof TypeTagStruct;
    }
    isU8() {
        return this instanceof TypeTagU8;
    }
    isU16() {
        return this instanceof TypeTagU16;
    }
    isU32() {
        return this instanceof TypeTagU32;
    }
    isU64() {
        return this instanceof TypeTagU64;
    }
    isU128() {
        return this instanceof TypeTagU128;
    }
    isU256() {
        return this instanceof TypeTagU256;
    }
}
exports.TypeTag = TypeTag;
class TypeTagBool extends TypeTag {
    toString() {
        return "bool";
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TypeTagVariants.Bool);
    }
    static load(_deserializer) {
        return new TypeTagBool();
    }
}
exports.TypeTagBool = TypeTagBool;
class TypeTagU8 extends TypeTag {
    toString() {
        return "u8";
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TypeTagVariants.U8);
    }
    static load(_deserializer) {
        return new TypeTagU8();
    }
}
exports.TypeTagU8 = TypeTagU8;
class TypeTagU16 extends TypeTag {
    toString() {
        return "u16";
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TypeTagVariants.U16);
    }
    static load(_deserializer) {
        return new TypeTagU16();
    }
}
exports.TypeTagU16 = TypeTagU16;
class TypeTagU32 extends TypeTag {
    toString() {
        return "u32";
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TypeTagVariants.U32);
    }
    static load(_deserializer) {
        return new TypeTagU32();
    }
}
exports.TypeTagU32 = TypeTagU32;
class TypeTagU64 extends TypeTag {
    toString() {
        return "u64";
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TypeTagVariants.U64);
    }
    static load(_deserializer) {
        return new TypeTagU64();
    }
}
exports.TypeTagU64 = TypeTagU64;
class TypeTagU128 extends TypeTag {
    toString() {
        return "u128";
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TypeTagVariants.U128);
    }
    static load(_deserializer) {
        return new TypeTagU128();
    }
}
exports.TypeTagU128 = TypeTagU128;
class TypeTagU256 extends TypeTag {
    toString() {
        return "u256";
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TypeTagVariants.U256);
    }
    static load(_deserializer) {
        return new TypeTagU256();
    }
}
exports.TypeTagU256 = TypeTagU256;
class TypeTagAddress extends TypeTag {
    toString() {
        return "address";
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TypeTagVariants.Address);
    }
    static load(_deserializer) {
        return new TypeTagAddress();
    }
}
exports.TypeTagAddress = TypeTagAddress;
class TypeTagSigner extends TypeTag {
    toString() {
        return "signer";
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TypeTagVariants.Signer);
    }
    static load(_deserializer) {
        return new TypeTagSigner();
    }
}
exports.TypeTagSigner = TypeTagSigner;
class TypeTagReference extends TypeTag {
    toString() {
        return `&${this.value.toString()}`;
    }
    constructor(value) {
        super();
        this.value = value;
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TypeTagVariants.Reference);
    }
    static load(deserializer) {
        const value = TypeTag.deserialize(deserializer);
        return new TypeTagReference(value);
    }
}
exports.TypeTagReference = TypeTagReference;
class TypeTagGeneric extends TypeTag {
    toString() {
        return `T${this.value}`;
    }
    constructor(value) {
        super();
        this.value = value;
        if (value < 0)
            throw new Error("Generic type parameter index cannot be negative");
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TypeTagVariants.Generic);
        serializer.serializeU32(this.value);
    }
    static load(deserializer) {
        const value = deserializer.deserializeU32();
        return new TypeTagGeneric(value);
    }
}
exports.TypeTagGeneric = TypeTagGeneric;
class TypeTagVector extends TypeTag {
    toString() {
        return `vector<${this.value.toString()}>`;
    }
    constructor(value) {
        super();
        this.value = value;
    }
    static u8() {
        return new TypeTagVector(new TypeTagU8());
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TypeTagVariants.Vector);
        this.value.serialize(serializer);
    }
    static load(deserializer) {
        const value = TypeTag.deserialize(deserializer);
        return new TypeTagVector(value);
    }
}
exports.TypeTagVector = TypeTagVector;
class TypeTagStruct extends TypeTag {
    toString() {
        let typePredicate = "";
        if (this.value.typeArgs.length > 0) {
            typePredicate = `<${this.value.typeArgs.map((typeArg) => typeArg.toString()).join(", ")}>`;
        }
        return `${this.value.address.toString()}::${this.value.moduleName.identifier}::${this.value.name.identifier}${typePredicate}`;
    }
    constructor(value) {
        super();
        this.value = value;
    }
    serialize(serializer) {
        serializer.serializeU32AsUleb128(types_1.TypeTagVariants.Struct);
        this.value.serialize(serializer);
    }
    static load(deserializer) {
        const value = StructTag.deserialize(deserializer);
        return new TypeTagStruct(value);
    }
    isTypeTag(address, moduleName, structName) {
        return (this.value.moduleName.identifier === moduleName &&
            this.value.name.identifier === structName &&
            this.value.address.equals(address));
    }
    isString() {
        return this.isTypeTag(core_1.AccountAddress.ONE, "string", "String");
    }
    isOption() {
        return this.isTypeTag(core_1.AccountAddress.ONE, "option", "Option");
    }
    isObject() {
        return this.isTypeTag(core_1.AccountAddress.ONE, "object", "Object");
    }
}
exports.TypeTagStruct = TypeTagStruct;
class StructTag extends serializer_1.Serializable {
    constructor(address, module_name, name, type_args) {
        super();
        this.address = address;
        this.moduleName = module_name;
        this.name = name;
        this.typeArgs = type_args;
    }
    serialize(serializer) {
        serializer.serialize(this.address);
        serializer.serialize(this.moduleName);
        serializer.serialize(this.name);
        serializer.serializeVector(this.typeArgs);
    }
    static deserialize(deserializer) {
        const address = core_1.AccountAddress.deserialize(deserializer);
        const moduleName = identifier_1.Identifier.deserialize(deserializer);
        const name = identifier_1.Identifier.deserialize(deserializer);
        const typeArgs = deserializer.deserializeVector(TypeTag);
        return new StructTag(address, moduleName, name, typeArgs);
    }
}
exports.StructTag = StructTag;
function aptosCoinStructTag() {
    return new StructTag(core_1.AccountAddress.ONE, new identifier_1.Identifier("aptos_coin"), new identifier_1.Identifier("AptosCoin"), []);
}
exports.aptosCoinStructTag = aptosCoinStructTag;
function stringStructTag() {
    return new StructTag(core_1.AccountAddress.ONE, new identifier_1.Identifier("string"), new identifier_1.Identifier("String"), []);
}
exports.stringStructTag = stringStructTag;
function optionStructTag(typeArg) {
    return new StructTag(core_1.AccountAddress.ONE, new identifier_1.Identifier("option"), new identifier_1.Identifier("Option"), [typeArg]);
}
exports.optionStructTag = optionStructTag;
function objectStructTag(typeArg) {
    return new StructTag(core_1.AccountAddress.ONE, new identifier_1.Identifier("object"), new identifier_1.Identifier("Object"), [typeArg]);
}
exports.objectStructTag = objectStructTag;
//# sourceMappingURL=index.js.map