"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSigningMessageForTransaction = exports.generateSigningMessageForSerializable = exports.generateSigningMessage = exports.deriveTransactionType = void 0;
const sha3_1 = require("@noble/hashes/sha3");
const const_1 = require("../../utils/const");
const instances_1 = require("../instances");
function deriveTransactionType(transaction) {
    if (transaction.feePayerAddress) {
        return new instances_1.FeePayerRawTransaction(transaction.rawTransaction, transaction.secondarySignerAddresses ?? [], transaction.feePayerAddress);
    }
    if (transaction.secondarySignerAddresses) {
        return new instances_1.MultiAgentRawTransaction(transaction.rawTransaction, transaction.secondarySignerAddresses);
    }
    return transaction.rawTransaction;
}
exports.deriveTransactionType = deriveTransactionType;
function generateSigningMessage(bytes, domainSeparator) {
    const hash = sha3_1.sha3_256.create();
    if (!domainSeparator.startsWith("APTOS::")) {
        throw new Error(`Domain separator needs to start with 'APTOS::'.  Provided - ${domainSeparator}`);
    }
    hash.update(domainSeparator);
    const prefix = hash.digest();
    const body = bytes;
    const mergedArray = new Uint8Array(prefix.length + body.length);
    mergedArray.set(prefix);
    mergedArray.set(body, prefix.length);
    return mergedArray;
}
exports.generateSigningMessage = generateSigningMessage;
function generateSigningMessageForSerializable(serializable) {
    return generateSigningMessage(serializable.bcsToBytes(), `APTOS::${serializable.constructor.name}`);
}
exports.generateSigningMessageForSerializable = generateSigningMessageForSerializable;
function generateSigningMessageForTransaction(transaction) {
    const rawTxn = deriveTransactionType(transaction);
    if (transaction.feePayerAddress) {
        return generateSigningMessage(rawTxn.bcsToBytes(), const_1.RAW_TRANSACTION_WITH_DATA_SALT);
    }
    if (transaction.secondarySignerAddresses) {
        return generateSigningMessage(rawTxn.bcsToBytes(), const_1.RAW_TRANSACTION_WITH_DATA_SALT);
    }
    return generateSigningMessage(rawTxn.bcsToBytes(), const_1.RAW_TRANSACTION_SALT);
}
exports.generateSigningMessageForTransaction = generateSigningMessageForTransaction;
//# sourceMappingURL=signingMessage.js.map