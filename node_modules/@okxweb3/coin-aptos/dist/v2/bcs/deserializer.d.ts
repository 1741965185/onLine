import { Uint8, Uint16, Uint32, Uint64, Uint128, Uint256 } from "../types";
export interface Deserializable<T> {
    deserialize(deserializer: Deserializer): T;
}
export declare class Deserializer {
    private buffer;
    private offset;
    constructor(data: Uint8Array);
    private read;
    deserializeStr(): string;
    deserializeBytes(): Uint8Array;
    deserializeFixedBytes(len: number): Uint8Array;
    deserializeBool(): boolean;
    deserializeU8(): Uint8;
    deserializeU16(): Uint16;
    deserializeU32(): Uint32;
    deserializeU64(): Uint64;
    deserializeU128(): Uint128;
    deserializeU256(): Uint256;
    deserializeUleb128AsU32(): Uint32;
    deserialize<T>(cls: Deserializable<T>): T;
    deserializeVector<T>(cls: Deserializable<T>): Array<T>;
}
