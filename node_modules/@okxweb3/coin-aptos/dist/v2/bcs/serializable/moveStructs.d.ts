import { Bool, U128, U16, U256, U32, U64, U8 } from "./movePrimitives";
import { Serializable, Serializer } from "../serializer";
import { Deserializable, Deserializer } from "../deserializer";
import { AnyNumber, HexInput } from "../../types";
import { EntryFunctionArgument, TransactionArgument } from "../../transactions/instances/transactionArgument";
export declare class MoveVector<T extends Serializable & EntryFunctionArgument> extends Serializable implements TransactionArgument {
    values: Array<T>;
    constructor(values: Array<T>);
    serializeForEntryFunction(serializer: Serializer): void;
    serializeForScriptFunction(serializer: Serializer): void;
    static U8(values: Array<number> | HexInput): MoveVector<U8>;
    static U16(values: Array<number>): MoveVector<U16>;
    static U32(values: Array<number>): MoveVector<U32>;
    static U64(values: Array<AnyNumber>): MoveVector<U64>;
    static U128(values: Array<AnyNumber>): MoveVector<U128>;
    static U256(values: Array<AnyNumber>): MoveVector<U256>;
    static Bool(values: Array<boolean>): MoveVector<Bool>;
    static MoveString(values: Array<string>): MoveVector<MoveString>;
    serialize(serializer: Serializer): void;
    static deserialize<T extends Serializable & EntryFunctionArgument>(deserializer: Deserializer, cls: Deserializable<T>): MoveVector<T>;
}
export declare class MoveString extends Serializable implements TransactionArgument {
    value: string;
    constructor(value: string);
    serialize(serializer: Serializer): void;
    serializeForEntryFunction(serializer: Serializer): void;
    serializeForScriptFunction(serializer: Serializer): void;
    static deserialize(deserializer: Deserializer): MoveString;
}
export declare class MoveOption<T extends Serializable & EntryFunctionArgument> extends Serializable implements EntryFunctionArgument {
    private vec;
    readonly value?: T;
    constructor(value?: T | null);
    serializeForEntryFunction(serializer: Serializer): void;
    unwrap(): T;
    isSome(): boolean;
    serialize(serializer: Serializer): void;
    static U8(value?: number | null): MoveOption<U8>;
    static U16(value?: number | null): MoveOption<U16>;
    static U32(value?: number | null): MoveOption<U32>;
    static U64(value?: AnyNumber | null): MoveOption<U64>;
    static U128(value?: AnyNumber | null): MoveOption<U128>;
    static U256(value?: AnyNumber | null): MoveOption<U256>;
    static Bool(value?: boolean | null): MoveOption<Bool>;
    static MoveString(value?: string | null): MoveOption<MoveString>;
    static deserialize<U extends Serializable & EntryFunctionArgument>(deserializer: Deserializer, cls: Deserializable<U>): MoveOption<U>;
}
