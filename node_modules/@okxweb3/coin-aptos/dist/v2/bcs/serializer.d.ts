import { Hex } from "../core/hex";
import { AnyNumber, Uint16, Uint32, Uint8 } from "../types";
export declare abstract class Serializable {
    abstract serialize(serializer: Serializer): void;
    bcsToBytes(): Uint8Array;
    bcsToHex(): Hex;
}
export declare class Serializer {
    private buffer;
    private offset;
    constructor(length?: number);
    private ensureBufferWillHandleSize;
    protected appendToBuffer(values: Uint8Array): void;
    private serializeWithFunction;
    serializeStr(value: string): void;
    serializeBytes(value: Uint8Array): void;
    serializeFixedBytes(value: Uint8Array): void;
    serializeBool(value: boolean): void;
    serializeU8(value: Uint8): void;
    serializeU16(value: Uint16): void;
    serializeU32(value: Uint32): void;
    serializeU64(value: AnyNumber): void;
    serializeU128(value: AnyNumber): void;
    serializeU256(value: AnyNumber): void;
    serializeU32AsUleb128(val: Uint32): void;
    toUint8Array(): Uint8Array;
    serialize<T extends Serializable>(value: T): void;
    serializeVector<T extends Serializable>(values: Array<T>): void;
}
export declare function ensureBoolean(value: unknown): asserts value is boolean;
export declare const outOfRangeErrorMessage: (value: AnyNumber, min: AnyNumber, max: AnyNumber) => string;
export declare function validateNumberInRange<T extends AnyNumber>(value: T, minValue: T, maxValue: T): void;
