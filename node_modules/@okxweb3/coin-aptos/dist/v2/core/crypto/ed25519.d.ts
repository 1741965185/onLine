import { Deserializer } from "../../bcs/deserializer";
import { Serializable, Serializer } from "../../bcs/serializer";
import { AuthenticationKey } from "../authenticationKey";
import { HexInput } from "../../types";
import { PrivateKey } from "./privateKey";
import { AccountPublicKey, VerifySignatureArgs } from "./publicKey";
import { Signature } from "./signature";
export declare class Ed25519PublicKey extends AccountPublicKey {
    static readonly LENGTH: number;
    private readonly key;
    constructor(hexInput: HexInput);
    verifySignature(args: VerifySignatureArgs): boolean;
    authKey(): AuthenticationKey;
    toUint8Array(): Uint8Array;
    serialize(serializer: Serializer): void;
    static deserialize(deserializer: Deserializer): Ed25519PublicKey;
    static isPublicKey(publicKey: AccountPublicKey): publicKey is Ed25519PublicKey;
}
export declare class Ed25519PrivateKey extends Serializable implements PrivateKey {
    static readonly LENGTH: number;
    static readonly SLIP_0010_SEED = "ed25519 seed";
    private readonly signingKey;
    constructor(hexInput: HexInput);
    static generate(): Ed25519PrivateKey;
    static fromDerivationPath(path: string, mnemonics: string): Ed25519PrivateKey;
    private static fromDerivationPathInner;
    publicKey(): Ed25519PublicKey;
    sign(message: HexInput): Ed25519Signature;
    toUint8Array(): Uint8Array;
    toString(): string;
    serialize(serializer: Serializer): void;
    static deserialize(deserializer: Deserializer): Ed25519PrivateKey;
    static isPrivateKey(privateKey: PrivateKey): privateKey is Ed25519PrivateKey;
}
export declare class Ed25519Signature extends Signature {
    static readonly LENGTH = 64;
    private readonly data;
    constructor(hexInput: HexInput);
    toUint8Array(): Uint8Array;
    serialize(serializer: Serializer): void;
    static deserialize(deserializer: Deserializer): Ed25519Signature;
    isCanonicalSignature(): boolean;
}
