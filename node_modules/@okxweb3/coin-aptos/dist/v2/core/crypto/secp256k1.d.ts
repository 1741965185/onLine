import { Serializable, Deserializer, Serializer } from "../../bcs";
import { HexInput } from "../../types";
import { PrivateKey } from "./privateKey";
import { PublicKey, VerifySignatureArgs } from "./publicKey";
import { Signature } from "./signature";
export declare class Secp256k1PublicKey extends PublicKey {
    static readonly LENGTH: number;
    private readonly key;
    constructor(hexInput: HexInput);
    verifySignature(args: VerifySignatureArgs): boolean;
    toUint8Array(): Uint8Array;
    serialize(serializer: Serializer): void;
    static deserialize(deserializer: Deserializer): Secp256k1PublicKey;
    static isPublicKey(publicKey: PublicKey): publicKey is Secp256k1PublicKey;
}
export declare class Secp256k1PrivateKey extends Serializable implements PrivateKey {
    static readonly LENGTH: number;
    private readonly key;
    constructor(hexInput: HexInput);
    static generate(): Secp256k1PrivateKey;
    static fromDerivationPath(path: string, mnemonics: string): Secp256k1PrivateKey;
    private static fromDerivationPathInner;
    sign(message: HexInput): Secp256k1Signature;
    publicKey(): Secp256k1PublicKey;
    toUint8Array(): Uint8Array;
    toString(): string;
    serialize(serializer: Serializer): void;
    static deserialize(deserializer: Deserializer): Secp256k1PrivateKey;
    static isPrivateKey(privateKey: PrivateKey): privateKey is Secp256k1PrivateKey;
}
export declare class Secp256k1Signature extends Signature {
    static readonly LENGTH = 64;
    private readonly data;
    constructor(hexInput: HexInput);
    toUint8Array(): Uint8Array;
    serialize(serializer: Serializer): void;
    static deserialize(deserializer: Deserializer): Secp256k1Signature;
}
