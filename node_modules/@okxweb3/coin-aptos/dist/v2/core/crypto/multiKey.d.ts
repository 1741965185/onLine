import { Deserializer } from "../../bcs/deserializer";
import { Serializer } from "../../bcs/serializer";
import { AuthenticationKey } from "../authenticationKey";
import { AccountPublicKey, PublicKey, VerifySignatureArgs } from "./publicKey";
import { Signature } from "./signature";
import { AnyPublicKey, AnySignature } from "./singleKey";
export declare class MultiKey extends AccountPublicKey {
    readonly publicKeys: AnyPublicKey[];
    readonly signaturesRequired: number;
    constructor(args: {
        publicKeys: Array<PublicKey>;
        signaturesRequired: number;
    });
    verifySignature(args: VerifySignatureArgs): boolean;
    authKey(): AuthenticationKey;
    toUint8Array(): Uint8Array;
    serialize(serializer: Serializer): void;
    static deserialize(deserializer: Deserializer): MultiKey;
    createBitmap(args: {
        bits: number[];
    }): Uint8Array;
    getIndex(publicKey: PublicKey): number;
}
export declare class MultiKeySignature extends Signature {
    static BITMAP_LEN: number;
    static MAX_SIGNATURES_SUPPORTED: number;
    readonly signatures: AnySignature[];
    readonly bitmap: Uint8Array;
    constructor(args: {
        signatures: Array<Signature | AnySignature>;
        bitmap: Uint8Array | number[];
    });
    static createBitmap(args: {
        bits: number[];
    }): Uint8Array;
    toUint8Array(): Uint8Array;
    serialize(serializer: Serializer): void;
    static deserialize(deserializer: Deserializer): MultiKeySignature;
}
