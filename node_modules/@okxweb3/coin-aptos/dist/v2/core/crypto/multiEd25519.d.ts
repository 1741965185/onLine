import { Deserializer, Serializer } from "../../bcs";
import { AuthenticationKey } from "../authenticationKey";
import { Ed25519PublicKey, Ed25519Signature } from "./ed25519";
import { AccountPublicKey, VerifySignatureArgs } from "./publicKey";
import { Signature } from "./signature";
export declare class MultiEd25519PublicKey extends AccountPublicKey {
    static readonly MAX_KEYS = 32;
    static readonly MIN_KEYS = 2;
    static readonly MIN_THRESHOLD = 1;
    readonly publicKeys: Ed25519PublicKey[];
    readonly threshold: number;
    constructor(args: {
        publicKeys: Ed25519PublicKey[];
        threshold: number;
    });
    verifySignature(args: VerifySignatureArgs): boolean;
    authKey(): AuthenticationKey;
    toUint8Array(): Uint8Array;
    serialize(serializer: Serializer): void;
    static deserialize(deserializer: Deserializer): MultiEd25519PublicKey;
}
export declare class MultiEd25519Signature extends Signature {
    static MAX_SIGNATURES_SUPPORTED: number;
    static BITMAP_LEN: number;
    readonly signatures: Ed25519Signature[];
    readonly bitmap: Uint8Array;
    constructor(args: {
        signatures: Ed25519Signature[];
        bitmap: Uint8Array | number[];
    });
    toUint8Array(): Uint8Array;
    serialize(serializer: Serializer): void;
    static deserialize(deserializer: Deserializer): MultiEd25519Signature;
    static createBitmap(args: {
        bits: number[];
    }): Uint8Array;
}
