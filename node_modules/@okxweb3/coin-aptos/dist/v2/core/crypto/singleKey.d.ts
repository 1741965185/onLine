import { Deserializer, Serializer } from "../../bcs";
import { AnyPublicKeyVariant } from "../../types";
import { AuthenticationKey } from "../authenticationKey";
import { AccountPublicKey, PublicKey, VerifySignatureArgs } from "./publicKey";
import { Signature } from "./signature";
export declare class AnyPublicKey extends AccountPublicKey {
    readonly publicKey: PublicKey;
    readonly variant: AnyPublicKeyVariant;
    constructor(publicKey: PublicKey);
    verifySignature(args: VerifySignatureArgs): boolean;
    authKey(): AuthenticationKey;
    toUint8Array(): Uint8Array;
    serialize(serializer: Serializer): void;
    static deserialize(deserializer: Deserializer): AnyPublicKey;
    static isPublicKey(publicKey: AccountPublicKey): publicKey is AnyPublicKey;
    isEd25519(): boolean;
    isSecp256k1PublicKey(): boolean;
}
export declare class AnySignature extends Signature {
    readonly signature: Signature;
    private readonly variant;
    constructor(signature: Signature);
    toUint8Array(): Uint8Array;
    serialize(serializer: Serializer): void;
    static deserialize(deserializer: Deserializer): AnySignature;
}
