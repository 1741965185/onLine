import { Network } from "../utils/apiEndpoints";
import { OrderBy, TokenStandard } from "./indexer";
export * from "./indexer";
export declare enum MimeType {
    JSON = "application/json",
    BCS = "application/x-bcs",
    BCS_SIGNED_TRANSACTION = "application/x.aptos.signed_transaction+bcs"
}
export type HexInput = string | Uint8Array;
export declare enum TypeTagVariants {
    Bool = 0,
    U8 = 1,
    U64 = 2,
    U128 = 3,
    Address = 4,
    Signer = 5,
    Vector = 6,
    Struct = 7,
    U16 = 8,
    U32 = 9,
    U256 = 10,
    Reference = 254,
    Generic = 255
}
export declare enum ScriptTransactionArgumentVariants {
    U8 = 0,
    U64 = 1,
    U128 = 2,
    Address = 3,
    U8Vector = 4,
    Bool = 5,
    U16 = 6,
    U32 = 7,
    U256 = 8
}
export declare enum TransactionPayloadVariants {
    Script = 0,
    EntryFunction = 2,
    Multisig = 3
}
export declare enum TransactionVariants {
    MultiAgentTransaction = 0,
    FeePayerTransaction = 1
}
export declare enum TransactionAuthenticatorVariant {
    Ed25519 = 0,
    MultiEd25519 = 1,
    MultiAgent = 2,
    FeePayer = 3,
    SingleSender = 4
}
export declare enum AccountAuthenticatorVariant {
    Ed25519 = 0,
    MultiEd25519 = 1,
    SingleKey = 2,
    MultiKey = 3
}
export declare enum AnyPublicKeyVariant {
    Ed25519 = 0,
    Secp256k1 = 1
}
export declare enum AnySignatureVariant {
    Ed25519 = 0,
    Secp256k1 = 1
}
export type Uint8 = number;
export type Uint16 = number;
export type Uint32 = number;
export type Uint64 = bigint;
export type Uint128 = bigint;
export type Uint256 = bigint;
export type AnyNumber = number | bigint;
export type AptosSettings = {
    readonly network?: Network;
    readonly moveModule?: string;
};
export interface PaginationArgs {
    offset?: AnyNumber;
    limit?: number;
}
export interface TokenStandardArg {
    tokenStandard?: TokenStandard;
}
export interface OrderByArg<T extends {}> {
    orderBy?: OrderBy<T>;
}
export interface WhereArg<T extends {}> {
    where?: T;
}
export type ClientConfig = {
    AUTH_TOKEN?: string;
    API_KEY?: string;
    HEADERS?: Record<string, string | number | boolean>;
    WITH_CREDENTIALS?: boolean;
};
export interface ClientRequest<Req> {
    url: string;
    method: "GET" | "POST";
    body?: Req;
    contentType?: string;
    params?: any;
    overrides?: ClientConfig;
    headers?: Record<string, any>;
}
export interface ClientResponse<Res> {
    status: number;
    statusText: string;
    data: Res;
    config?: any;
    request?: any;
    response?: any;
    headers?: any;
}
export interface Client {
    provider<Req, Res>(requestOptions: ClientRequest<Req>): Promise<ClientResponse<Res>>;
}
export type AptosRequest = {
    url: string;
    method: "GET" | "POST";
    path?: string;
    body?: any;
    contentType?: string;
    acceptType?: string;
    params?: Record<string, string | AnyNumber | boolean | undefined>;
    originMethod?: string;
    overrides?: ClientConfig;
};
export type LedgerVersionArg = {
    ledgerVersion?: AnyNumber;
};
export type GasEstimation = {
    deprioritized_gas_estimate?: number;
    gas_estimate: number;
    prioritized_gas_estimate?: number;
};
export type MoveResource = {
    type: MoveStructId;
    data: {};
};
export type AccountData = {
    sequence_number: string;
    authentication_key: string;
};
export type MoveModuleBytecode = {
    bytecode: string;
    abi?: MoveModule;
};
export declare enum TransactionResponseType {
    Pending = "pending_transaction",
    User = "user_transaction",
    Genesis = "genesis_transaction",
    BlockMetadata = "block_metadata_transaction",
    StateCheckpoint = "state_checkpoint_transaction"
}
export type TransactionResponse = PendingTransactionResponse | CommittedTransactionResponse;
export type CommittedTransactionResponse = UserTransactionResponse | GenesisTransactionResponse | BlockMetadataTransactionResponse | StateCheckpointTransactionResponse;
export declare function isPendingTransactionResponse(response: TransactionResponse): response is PendingTransactionResponse;
export declare function isUserTransactionResponse(response: TransactionResponse): response is UserTransactionResponse;
export declare function isGenesisTransactionResponse(response: TransactionResponse): response is GenesisTransactionResponse;
export declare function isBlockMetadataTransactionResponse(response: TransactionResponse): response is BlockMetadataTransactionResponse;
export declare function isStateCheckpointTransactionResponse(response: TransactionResponse): response is StateCheckpointTransactionResponse;
export type PendingTransactionResponse = {
    type: TransactionResponseType.Pending;
    hash: string;
    sender: string;
    sequence_number: string;
    max_gas_amount: string;
    gas_unit_price: string;
    expiration_timestamp_secs: string;
    payload: TransactionPayloadResponse;
    signature?: TransactionSignature;
};
export type UserTransactionResponse = {
    type: TransactionResponseType.User;
    version: string;
    hash: string;
    state_change_hash: string;
    event_root_hash: string;
    state_checkpoint_hash?: string;
    gas_used: string;
    success: boolean;
    vm_status: string;
    accumulator_root_hash: string;
    changes: Array<WriteSetChange>;
    sender: string;
    sequence_number: string;
    max_gas_amount: string;
    gas_unit_price: string;
    expiration_timestamp_secs: string;
    payload: TransactionPayloadResponse;
    signature?: TransactionSignature;
    events: Array<Event>;
    timestamp: string;
};
export type GenesisTransactionResponse = {
    type: TransactionResponseType.Genesis;
    version: string;
    hash: string;
    state_change_hash: string;
    event_root_hash: string;
    state_checkpoint_hash?: string;
    gas_used: string;
    success: boolean;
    vm_status: string;
    accumulator_root_hash: string;
    changes: Array<WriteSetChange>;
    payload: GenesisPayload;
    events: Array<Event>;
};
export type BlockMetadataTransactionResponse = {
    type: TransactionResponseType.BlockMetadata;
    version: string;
    hash: string;
    state_change_hash: string;
    event_root_hash: string;
    state_checkpoint_hash?: string;
    gas_used: string;
    success: boolean;
    vm_status: string;
    accumulator_root_hash: string;
    changes: Array<WriteSetChange>;
    id: string;
    epoch: string;
    round: string;
    events: Array<Event>;
    previous_block_votes_bitvec: Array<number>;
    proposer: string;
    failed_proposer_indices: Array<number>;
    timestamp: string;
};
export type StateCheckpointTransactionResponse = {
    type: TransactionResponseType.StateCheckpoint;
    version: string;
    hash: string;
    state_change_hash: string;
    event_root_hash: string;
    state_checkpoint_hash?: string;
    gas_used: string;
    success: boolean;
    vm_status: string;
    accumulator_root_hash: string;
    changes: Array<WriteSetChange>;
    timestamp: string;
};
export type WriteSetChange = WriteSetChangeDeleteModule | WriteSetChangeDeleteResource | WriteSetChangeDeleteTableItem | WriteSetChangeWriteModule | WriteSetChangeWriteResource | WriteSetChangeWriteTableItem;
export type WriteSetChangeDeleteModule = {
    type: string;
    address: string;
    state_key_hash: string;
    module: MoveModuleId;
};
export type WriteSetChangeDeleteResource = {
    type: string;
    address: string;
    state_key_hash: string;
    resource: string;
};
export type WriteSetChangeDeleteTableItem = {
    type: string;
    state_key_hash: string;
    handle: string;
    key: string;
    data?: DeletedTableData;
};
export type WriteSetChangeWriteModule = {
    type: string;
    address: string;
    state_key_hash: string;
    data: MoveModuleBytecode;
};
export type WriteSetChangeWriteResource = {
    type: string;
    address: string;
    state_key_hash: string;
    data: MoveResource;
};
export type WriteSetChangeWriteTableItem = {
    type: string;
    state_key_hash: string;
    handle: string;
    key: string;
    value: string;
    data?: DecodedTableData;
};
export type DecodedTableData = {
    key: any;
    key_type: string;
    value: any;
    value_type: string;
};
export type DeletedTableData = {
    key: any;
    key_type: string;
};
export type TransactionPayloadResponse = EntryFunctionPayloadResponse | ScriptPayloadResponse | MultisigPayloadResponse;
export type EntryFunctionPayloadResponse = {
    type: string;
    function: MoveFunctionId;
    type_arguments: Array<string>;
    arguments: Array<any>;
};
export type ScriptPayloadResponse = {
    type: string;
    code: MoveScriptBytecode;
    type_arguments: Array<string>;
    arguments: Array<any>;
};
export type MultisigPayloadResponse = {
    type: string;
    multisig_address: string;
    transaction_payload?: EntryFunctionPayloadResponse;
};
export type GenesisPayload = {
    type: string;
    write_set: WriteSet;
};
export type MoveScriptBytecode = {
    bytecode: string;
    abi?: MoveFunction;
};
export type TransactionSignature = TransactionEd25519Signature | TransactionSecp256k1Signature | TransactionMultiEd25519Signature | TransactionMultiAgentSignature | TransactionFeePayerSignature;
export declare function isEd25519Signature(signature: TransactionSignature): signature is TransactionFeePayerSignature;
export declare function isSecp256k1Signature(signature: TransactionSignature): signature is TransactionFeePayerSignature;
export declare function isMultiAgentSignature(signature: TransactionSignature): signature is TransactionMultiAgentSignature;
export declare function isFeePayerSignature(signature: TransactionSignature): signature is TransactionFeePayerSignature;
export declare function isMultiEd25519Signature(signature: TransactionSignature): signature is TransactionMultiEd25519Signature;
export type TransactionEd25519Signature = {
    type: string;
    public_key: string;
    signature: "ed25519_signature";
};
export type TransactionSecp256k1Signature = {
    type: string;
    public_key: string;
    signature: "secp256k1_ecdsa_signature";
};
export type TransactionMultiEd25519Signature = {
    type: "multi_ed25519_signature";
    public_keys: Array<string>;
    signatures: Array<string>;
    threshold: number;
    bitmap: string;
};
export type TransactionMultiAgentSignature = {
    type: "multi_agent_signature";
    sender: AccountSignature;
    secondary_signer_addresses: Array<string>;
    secondary_signers: Array<AccountSignature>;
};
export type TransactionFeePayerSignature = {
    type: "fee_payer_signature";
    sender: AccountSignature;
    secondary_signer_addresses: Array<string>;
    secondary_signers: Array<AccountSignature>;
    fee_payer_address: string;
    fee_payer_signer: AccountSignature;
};
export type AccountSignature = TransactionEd25519Signature | TransactionSecp256k1Signature | TransactionMultiEd25519Signature;
export type WriteSet = ScriptWriteSet | DirectWriteSet;
export type ScriptWriteSet = {
    type: string;
    execute_as: string;
    script: ScriptPayloadResponse;
};
export type DirectWriteSet = {
    type: string;
    changes: Array<WriteSetChange>;
    events: Array<Event>;
};
export type EventGuid = {
    creation_number: string;
    account_address: string;
};
export type Event = {
    guid: EventGuid;
    sequence_number: string;
    type: string;
    data: any;
};
export type MoveUint8Type = number;
export type MoveUint16Type = number;
export type MoveUint32Type = number;
export type MoveUint64Type = string;
export type MoveUint128Type = string;
export type MoveUint256Type = string;
export type MoveAddressType = string;
export type MoveObjectType = string;
export type MoveOptionType = MoveType | null | undefined;
export type MoveStructId = `${string}::${string}::${string}`;
export type MoveFunctionId = MoveStructId;
export type MoveStructType = {};
export type MoveType = boolean | string | MoveUint8Type | MoveUint16Type | MoveUint32Type | MoveUint64Type | MoveUint128Type | MoveUint256Type | MoveAddressType | MoveObjectType | MoveStructType | Array<MoveType>;
export type MoveValue = boolean | string | MoveUint8Type | MoveUint16Type | MoveUint32Type | MoveUint64Type | MoveUint128Type | MoveUint256Type | MoveAddressType | MoveObjectType | MoveStructId | MoveOptionType | Array<MoveValue>;
export type MoveModuleId = `${string}::${string}`;
export declare enum MoveFunctionVisibility {
    PRIVATE = "private",
    PUBLIC = "public",
    FRIEND = "friend"
}
export declare enum MoveAbility {
    STORE = "store",
    DROP = "drop",
    KEY = "key",
    COPY = "copy"
}
export type MoveFunctionGenericTypeParam = {
    constraints: Array<MoveAbility>;
};
export type MoveStructField = {
    name: string;
    type: string;
};
export type MoveModule = {
    address: string;
    name: string;
    friends: Array<MoveModuleId>;
    exposed_functions: Array<MoveFunction>;
    structs: Array<MoveStruct>;
};
export type MoveStruct = {
    name: string;
    is_native: boolean;
    abilities: Array<MoveAbility>;
    generic_type_params: Array<MoveFunctionGenericTypeParam>;
    fields: Array<MoveStructField>;
};
export type MoveFunction = {
    name: string;
    visibility: MoveFunctionVisibility;
    is_entry: boolean;
    is_view: boolean;
    generic_type_params: Array<MoveFunctionGenericTypeParam>;
    params: Array<string>;
    return: Array<string>;
};
export declare enum RoleType {
    VALIDATOR = "validator",
    FULL_NODE = "full_node"
}
export type LedgerInfo = {
    chain_id: number;
    epoch: string;
    ledger_version: string;
    oldest_ledger_version: string;
    ledger_timestamp: string;
    node_role: RoleType;
    oldest_block_height: string;
    block_height: string;
    git_hash?: string;
};
export type Block = {
    block_height: string;
    block_hash: string;
    block_timestamp: string;
    first_version: string;
    last_version: string;
    transactions?: Array<TransactionResponse>;
};
export type InputViewRequestData = {
    function: MoveFunctionId;
    typeArguments?: Array<MoveStructId>;
    functionArguments?: Array<MoveValue>;
};
export type ViewRequest = {
    function: MoveFunctionId;
    typeArguments: Array<MoveStructId>;
    functionArguments: Array<MoveValue>;
};
export type TableItemRequest = {
    key_type: MoveValue;
    value_type: MoveValue;
    key: any;
};
export type AuthenticationKeyScheme = SigningScheme | DeriveScheme;
export declare enum SigningScheme {
    Ed25519 = 0,
    MultiEd25519 = 1,
    SingleKey = 2,
    MultiKey = 3
}
export declare enum SigningSchemeInput {
    Ed25519 = 0,
    Secp256k1Ecdsa = 2
}
export declare enum DeriveScheme {
    DeriveAuid = 251,
    DeriveObjectAddressFromObject = 252,
    DeriveObjectAddressFromGuid = 253,
    DeriveObjectAddressFromSeed = 254,
    DeriveResourceAccountAddress = 255
}
export type WaitForTransactionOptions = {
    timeoutSecs?: number;
    checkSuccess?: boolean;
    waitForIndexer?: boolean;
};
export type GenerateAccountWithEd25519 = {
    scheme: SigningSchemeInput.Ed25519;
    legacy: boolean;
};
export type GenerateAccountWithSingleSignerSecp256k1Key = {
    scheme: SigningSchemeInput.Secp256k1Ecdsa;
    legacy?: false;
};
export type GenerateAccount = GenerateAccountWithEd25519 | GenerateAccountWithSingleSignerSecp256k1Key;
