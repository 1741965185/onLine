"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeriveScheme = exports.SigningSchemeInput = exports.SigningScheme = exports.RoleType = exports.MoveAbility = exports.MoveFunctionVisibility = exports.isMultiEd25519Signature = exports.isFeePayerSignature = exports.isMultiAgentSignature = exports.isSecp256k1Signature = exports.isEd25519Signature = exports.isStateCheckpointTransactionResponse = exports.isBlockMetadataTransactionResponse = exports.isGenesisTransactionResponse = exports.isUserTransactionResponse = exports.isPendingTransactionResponse = exports.TransactionResponseType = exports.AnySignatureVariant = exports.AnyPublicKeyVariant = exports.AccountAuthenticatorVariant = exports.TransactionAuthenticatorVariant = exports.TransactionVariants = exports.TransactionPayloadVariants = exports.ScriptTransactionArgumentVariants = exports.TypeTagVariants = exports.MimeType = void 0;
__exportStar(require("./indexer"), exports);
var MimeType;
(function (MimeType) {
    MimeType["JSON"] = "application/json";
    MimeType["BCS"] = "application/x-bcs";
    MimeType["BCS_SIGNED_TRANSACTION"] = "application/x.aptos.signed_transaction+bcs";
})(MimeType = exports.MimeType || (exports.MimeType = {}));
var TypeTagVariants;
(function (TypeTagVariants) {
    TypeTagVariants[TypeTagVariants["Bool"] = 0] = "Bool";
    TypeTagVariants[TypeTagVariants["U8"] = 1] = "U8";
    TypeTagVariants[TypeTagVariants["U64"] = 2] = "U64";
    TypeTagVariants[TypeTagVariants["U128"] = 3] = "U128";
    TypeTagVariants[TypeTagVariants["Address"] = 4] = "Address";
    TypeTagVariants[TypeTagVariants["Signer"] = 5] = "Signer";
    TypeTagVariants[TypeTagVariants["Vector"] = 6] = "Vector";
    TypeTagVariants[TypeTagVariants["Struct"] = 7] = "Struct";
    TypeTagVariants[TypeTagVariants["U16"] = 8] = "U16";
    TypeTagVariants[TypeTagVariants["U32"] = 9] = "U32";
    TypeTagVariants[TypeTagVariants["U256"] = 10] = "U256";
    TypeTagVariants[TypeTagVariants["Reference"] = 254] = "Reference";
    TypeTagVariants[TypeTagVariants["Generic"] = 255] = "Generic";
})(TypeTagVariants = exports.TypeTagVariants || (exports.TypeTagVariants = {}));
var ScriptTransactionArgumentVariants;
(function (ScriptTransactionArgumentVariants) {
    ScriptTransactionArgumentVariants[ScriptTransactionArgumentVariants["U8"] = 0] = "U8";
    ScriptTransactionArgumentVariants[ScriptTransactionArgumentVariants["U64"] = 1] = "U64";
    ScriptTransactionArgumentVariants[ScriptTransactionArgumentVariants["U128"] = 2] = "U128";
    ScriptTransactionArgumentVariants[ScriptTransactionArgumentVariants["Address"] = 3] = "Address";
    ScriptTransactionArgumentVariants[ScriptTransactionArgumentVariants["U8Vector"] = 4] = "U8Vector";
    ScriptTransactionArgumentVariants[ScriptTransactionArgumentVariants["Bool"] = 5] = "Bool";
    ScriptTransactionArgumentVariants[ScriptTransactionArgumentVariants["U16"] = 6] = "U16";
    ScriptTransactionArgumentVariants[ScriptTransactionArgumentVariants["U32"] = 7] = "U32";
    ScriptTransactionArgumentVariants[ScriptTransactionArgumentVariants["U256"] = 8] = "U256";
})(ScriptTransactionArgumentVariants = exports.ScriptTransactionArgumentVariants || (exports.ScriptTransactionArgumentVariants = {}));
var TransactionPayloadVariants;
(function (TransactionPayloadVariants) {
    TransactionPayloadVariants[TransactionPayloadVariants["Script"] = 0] = "Script";
    TransactionPayloadVariants[TransactionPayloadVariants["EntryFunction"] = 2] = "EntryFunction";
    TransactionPayloadVariants[TransactionPayloadVariants["Multisig"] = 3] = "Multisig";
})(TransactionPayloadVariants = exports.TransactionPayloadVariants || (exports.TransactionPayloadVariants = {}));
var TransactionVariants;
(function (TransactionVariants) {
    TransactionVariants[TransactionVariants["MultiAgentTransaction"] = 0] = "MultiAgentTransaction";
    TransactionVariants[TransactionVariants["FeePayerTransaction"] = 1] = "FeePayerTransaction";
})(TransactionVariants = exports.TransactionVariants || (exports.TransactionVariants = {}));
var TransactionAuthenticatorVariant;
(function (TransactionAuthenticatorVariant) {
    TransactionAuthenticatorVariant[TransactionAuthenticatorVariant["Ed25519"] = 0] = "Ed25519";
    TransactionAuthenticatorVariant[TransactionAuthenticatorVariant["MultiEd25519"] = 1] = "MultiEd25519";
    TransactionAuthenticatorVariant[TransactionAuthenticatorVariant["MultiAgent"] = 2] = "MultiAgent";
    TransactionAuthenticatorVariant[TransactionAuthenticatorVariant["FeePayer"] = 3] = "FeePayer";
    TransactionAuthenticatorVariant[TransactionAuthenticatorVariant["SingleSender"] = 4] = "SingleSender";
})(TransactionAuthenticatorVariant = exports.TransactionAuthenticatorVariant || (exports.TransactionAuthenticatorVariant = {}));
var AccountAuthenticatorVariant;
(function (AccountAuthenticatorVariant) {
    AccountAuthenticatorVariant[AccountAuthenticatorVariant["Ed25519"] = 0] = "Ed25519";
    AccountAuthenticatorVariant[AccountAuthenticatorVariant["MultiEd25519"] = 1] = "MultiEd25519";
    AccountAuthenticatorVariant[AccountAuthenticatorVariant["SingleKey"] = 2] = "SingleKey";
    AccountAuthenticatorVariant[AccountAuthenticatorVariant["MultiKey"] = 3] = "MultiKey";
})(AccountAuthenticatorVariant = exports.AccountAuthenticatorVariant || (exports.AccountAuthenticatorVariant = {}));
var AnyPublicKeyVariant;
(function (AnyPublicKeyVariant) {
    AnyPublicKeyVariant[AnyPublicKeyVariant["Ed25519"] = 0] = "Ed25519";
    AnyPublicKeyVariant[AnyPublicKeyVariant["Secp256k1"] = 1] = "Secp256k1";
})(AnyPublicKeyVariant = exports.AnyPublicKeyVariant || (exports.AnyPublicKeyVariant = {}));
var AnySignatureVariant;
(function (AnySignatureVariant) {
    AnySignatureVariant[AnySignatureVariant["Ed25519"] = 0] = "Ed25519";
    AnySignatureVariant[AnySignatureVariant["Secp256k1"] = 1] = "Secp256k1";
})(AnySignatureVariant = exports.AnySignatureVariant || (exports.AnySignatureVariant = {}));
var TransactionResponseType;
(function (TransactionResponseType) {
    TransactionResponseType["Pending"] = "pending_transaction";
    TransactionResponseType["User"] = "user_transaction";
    TransactionResponseType["Genesis"] = "genesis_transaction";
    TransactionResponseType["BlockMetadata"] = "block_metadata_transaction";
    TransactionResponseType["StateCheckpoint"] = "state_checkpoint_transaction";
})(TransactionResponseType = exports.TransactionResponseType || (exports.TransactionResponseType = {}));
function isPendingTransactionResponse(response) {
    return response.type === TransactionResponseType.Pending;
}
exports.isPendingTransactionResponse = isPendingTransactionResponse;
function isUserTransactionResponse(response) {
    return response.type === TransactionResponseType.User;
}
exports.isUserTransactionResponse = isUserTransactionResponse;
function isGenesisTransactionResponse(response) {
    return response.type === TransactionResponseType.Genesis;
}
exports.isGenesisTransactionResponse = isGenesisTransactionResponse;
function isBlockMetadataTransactionResponse(response) {
    return response.type === TransactionResponseType.BlockMetadata;
}
exports.isBlockMetadataTransactionResponse = isBlockMetadataTransactionResponse;
function isStateCheckpointTransactionResponse(response) {
    return response.type === TransactionResponseType.StateCheckpoint;
}
exports.isStateCheckpointTransactionResponse = isStateCheckpointTransactionResponse;
function isEd25519Signature(signature) {
    return "signature" in signature && signature.signature === "ed25519_signature";
}
exports.isEd25519Signature = isEd25519Signature;
function isSecp256k1Signature(signature) {
    return "signature" in signature && signature.signature === "secp256k1_ecdsa_signature";
}
exports.isSecp256k1Signature = isSecp256k1Signature;
function isMultiAgentSignature(signature) {
    return signature.type === "multi_agent_signature";
}
exports.isMultiAgentSignature = isMultiAgentSignature;
function isFeePayerSignature(signature) {
    return signature.type === "fee_payer_signature";
}
exports.isFeePayerSignature = isFeePayerSignature;
function isMultiEd25519Signature(signature) {
    return signature.type === "multi_ed25519_signature";
}
exports.isMultiEd25519Signature = isMultiEd25519Signature;
var MoveFunctionVisibility;
(function (MoveFunctionVisibility) {
    MoveFunctionVisibility["PRIVATE"] = "private";
    MoveFunctionVisibility["PUBLIC"] = "public";
    MoveFunctionVisibility["FRIEND"] = "friend";
})(MoveFunctionVisibility = exports.MoveFunctionVisibility || (exports.MoveFunctionVisibility = {}));
var MoveAbility;
(function (MoveAbility) {
    MoveAbility["STORE"] = "store";
    MoveAbility["DROP"] = "drop";
    MoveAbility["KEY"] = "key";
    MoveAbility["COPY"] = "copy";
})(MoveAbility = exports.MoveAbility || (exports.MoveAbility = {}));
var RoleType;
(function (RoleType) {
    RoleType["VALIDATOR"] = "validator";
    RoleType["FULL_NODE"] = "full_node";
})(RoleType = exports.RoleType || (exports.RoleType = {}));
var SigningScheme;
(function (SigningScheme) {
    SigningScheme[SigningScheme["Ed25519"] = 0] = "Ed25519";
    SigningScheme[SigningScheme["MultiEd25519"] = 1] = "MultiEd25519";
    SigningScheme[SigningScheme["SingleKey"] = 2] = "SingleKey";
    SigningScheme[SigningScheme["MultiKey"] = 3] = "MultiKey";
})(SigningScheme = exports.SigningScheme || (exports.SigningScheme = {}));
var SigningSchemeInput;
(function (SigningSchemeInput) {
    SigningSchemeInput[SigningSchemeInput["Ed25519"] = 0] = "Ed25519";
    SigningSchemeInput[SigningSchemeInput["Secp256k1Ecdsa"] = 2] = "Secp256k1Ecdsa";
})(SigningSchemeInput = exports.SigningSchemeInput || (exports.SigningSchemeInput = {}));
var DeriveScheme;
(function (DeriveScheme) {
    DeriveScheme[DeriveScheme["DeriveAuid"] = 251] = "DeriveAuid";
    DeriveScheme[DeriveScheme["DeriveObjectAddressFromObject"] = 252] = "DeriveObjectAddressFromObject";
    DeriveScheme[DeriveScheme["DeriveObjectAddressFromGuid"] = 253] = "DeriveObjectAddressFromGuid";
    DeriveScheme[DeriveScheme["DeriveObjectAddressFromSeed"] = 254] = "DeriveObjectAddressFromSeed";
    DeriveScheme[DeriveScheme["DeriveResourceAccountAddress"] = 255] = "DeriveResourceAccountAddress";
})(DeriveScheme = exports.DeriveScheme || (exports.DeriveScheme = {}));
//# sourceMappingURL=index.js.map