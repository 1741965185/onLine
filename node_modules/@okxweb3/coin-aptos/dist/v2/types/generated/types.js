"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableItemsSelectColumn = exports.ProposalVotesSelectColumn = exports.ProcessorStatusSelectColumn = exports.OrderBy = exports.NumActiveDelegatorPerPoolSelectColumn = exports.NftMetadataCrawlerParsedAssetUrisSelectColumn = exports.NftMarketplaceV2NftMarketplaceActivitiesSelectColumn = exports.NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn = exports.NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn = exports.NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn = exports.NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn = exports.MoveResourcesSelectColumn = exports.LedgerInfosSelectColumn = exports.IndexerStatusSelectColumn = exports.FungibleAssetMetadataSelectColumn = exports.FungibleAssetActivitiesSelectColumn = exports.EventsSelectColumn = exports.DelegatorDistinctPoolSelectColumn = exports.DelegatedStakingPoolsSelectColumn = exports.DelegatedStakingActivitiesSelectColumn = exports.CursorOrdering = exports.CurrentTokenPendingClaimsSelectColumn = exports.CurrentTokenOwnershipsV2SelectColumn = exports.CurrentTokenOwnershipsSelectColumn = exports.CurrentTokenDatasV2SelectColumn = exports.CurrentTokenDatasSelectColumn = exports.CurrentTableItemsSelectColumn = exports.CurrentStakingPoolVoterSelectColumn = exports.CurrentObjectsSelectColumn = exports.CurrentFungibleAssetBalancesSelectColumn = exports.CurrentDelegatorBalancesSelectColumn = exports.CurrentDelegatedVoterSelectColumn = exports.CurrentDelegatedStakingPoolBalancesSelectColumn = exports.CurrentCollectionsV2SelectColumn = exports.CurrentCollectionOwnershipV2ViewSelectColumn = exports.CurrentCollectionDatasSelectColumn = exports.CurrentCoinBalancesSelectColumn = exports.CurrentAptosNamesSelectColumn = exports.CurrentAnsLookupV2SelectColumn = exports.CurrentAnsLookupSelectColumn = exports.CollectionDatasSelectColumn = exports.CoinSupplySelectColumn = exports.CoinInfosSelectColumn = exports.CoinBalancesSelectColumn = exports.CoinActivitiesSelectColumn = exports.BlockMetadataTransactionsSelectColumn = exports.AddressVersionFromMoveResourcesSelectColumn = exports.AddressVersionFromEventsSelectColumn = exports.AddressEventsSummarySelectColumn = exports.AccountTransactionsSelectColumn = void 0;
exports.UserTransactionsSelectColumn = exports.TokensSelectColumn = exports.TokenOwnershipsSelectColumn = exports.TokenDatasSelectColumn = exports.TokenActivitiesV2SelectColumn = exports.TokenActivitiesSelectColumn = exports.TableMetadatasSelectColumn = void 0;
var AccountTransactionsSelectColumn;
(function (AccountTransactionsSelectColumn) {
    AccountTransactionsSelectColumn["AccountAddress"] = "account_address";
    AccountTransactionsSelectColumn["TransactionVersion"] = "transaction_version";
})(AccountTransactionsSelectColumn = exports.AccountTransactionsSelectColumn || (exports.AccountTransactionsSelectColumn = {}));
var AddressEventsSummarySelectColumn;
(function (AddressEventsSummarySelectColumn) {
    AddressEventsSummarySelectColumn["AccountAddress"] = "account_address";
    AddressEventsSummarySelectColumn["MinBlockHeight"] = "min_block_height";
    AddressEventsSummarySelectColumn["NumDistinctVersions"] = "num_distinct_versions";
})(AddressEventsSummarySelectColumn = exports.AddressEventsSummarySelectColumn || (exports.AddressEventsSummarySelectColumn = {}));
var AddressVersionFromEventsSelectColumn;
(function (AddressVersionFromEventsSelectColumn) {
    AddressVersionFromEventsSelectColumn["AccountAddress"] = "account_address";
    AddressVersionFromEventsSelectColumn["TransactionVersion"] = "transaction_version";
})(AddressVersionFromEventsSelectColumn = exports.AddressVersionFromEventsSelectColumn || (exports.AddressVersionFromEventsSelectColumn = {}));
var AddressVersionFromMoveResourcesSelectColumn;
(function (AddressVersionFromMoveResourcesSelectColumn) {
    AddressVersionFromMoveResourcesSelectColumn["Address"] = "address";
    AddressVersionFromMoveResourcesSelectColumn["TransactionVersion"] = "transaction_version";
})(AddressVersionFromMoveResourcesSelectColumn = exports.AddressVersionFromMoveResourcesSelectColumn || (exports.AddressVersionFromMoveResourcesSelectColumn = {}));
var BlockMetadataTransactionsSelectColumn;
(function (BlockMetadataTransactionsSelectColumn) {
    BlockMetadataTransactionsSelectColumn["BlockHeight"] = "block_height";
    BlockMetadataTransactionsSelectColumn["Epoch"] = "epoch";
    BlockMetadataTransactionsSelectColumn["FailedProposerIndices"] = "failed_proposer_indices";
    BlockMetadataTransactionsSelectColumn["Id"] = "id";
    BlockMetadataTransactionsSelectColumn["PreviousBlockVotesBitvec"] = "previous_block_votes_bitvec";
    BlockMetadataTransactionsSelectColumn["Proposer"] = "proposer";
    BlockMetadataTransactionsSelectColumn["Round"] = "round";
    BlockMetadataTransactionsSelectColumn["Timestamp"] = "timestamp";
    BlockMetadataTransactionsSelectColumn["Version"] = "version";
})(BlockMetadataTransactionsSelectColumn = exports.BlockMetadataTransactionsSelectColumn || (exports.BlockMetadataTransactionsSelectColumn = {}));
var CoinActivitiesSelectColumn;
(function (CoinActivitiesSelectColumn) {
    CoinActivitiesSelectColumn["ActivityType"] = "activity_type";
    CoinActivitiesSelectColumn["Amount"] = "amount";
    CoinActivitiesSelectColumn["BlockHeight"] = "block_height";
    CoinActivitiesSelectColumn["CoinType"] = "coin_type";
    CoinActivitiesSelectColumn["EntryFunctionIdStr"] = "entry_function_id_str";
    CoinActivitiesSelectColumn["EventAccountAddress"] = "event_account_address";
    CoinActivitiesSelectColumn["EventCreationNumber"] = "event_creation_number";
    CoinActivitiesSelectColumn["EventIndex"] = "event_index";
    CoinActivitiesSelectColumn["EventSequenceNumber"] = "event_sequence_number";
    CoinActivitiesSelectColumn["IsGasFee"] = "is_gas_fee";
    CoinActivitiesSelectColumn["IsTransactionSuccess"] = "is_transaction_success";
    CoinActivitiesSelectColumn["OwnerAddress"] = "owner_address";
    CoinActivitiesSelectColumn["StorageRefundAmount"] = "storage_refund_amount";
    CoinActivitiesSelectColumn["TransactionTimestamp"] = "transaction_timestamp";
    CoinActivitiesSelectColumn["TransactionVersion"] = "transaction_version";
})(CoinActivitiesSelectColumn = exports.CoinActivitiesSelectColumn || (exports.CoinActivitiesSelectColumn = {}));
var CoinBalancesSelectColumn;
(function (CoinBalancesSelectColumn) {
    CoinBalancesSelectColumn["Amount"] = "amount";
    CoinBalancesSelectColumn["CoinType"] = "coin_type";
    CoinBalancesSelectColumn["CoinTypeHash"] = "coin_type_hash";
    CoinBalancesSelectColumn["OwnerAddress"] = "owner_address";
    CoinBalancesSelectColumn["TransactionTimestamp"] = "transaction_timestamp";
    CoinBalancesSelectColumn["TransactionVersion"] = "transaction_version";
})(CoinBalancesSelectColumn = exports.CoinBalancesSelectColumn || (exports.CoinBalancesSelectColumn = {}));
var CoinInfosSelectColumn;
(function (CoinInfosSelectColumn) {
    CoinInfosSelectColumn["CoinType"] = "coin_type";
    CoinInfosSelectColumn["CoinTypeHash"] = "coin_type_hash";
    CoinInfosSelectColumn["CreatorAddress"] = "creator_address";
    CoinInfosSelectColumn["Decimals"] = "decimals";
    CoinInfosSelectColumn["Name"] = "name";
    CoinInfosSelectColumn["SupplyAggregatorTableHandle"] = "supply_aggregator_table_handle";
    CoinInfosSelectColumn["SupplyAggregatorTableKey"] = "supply_aggregator_table_key";
    CoinInfosSelectColumn["Symbol"] = "symbol";
    CoinInfosSelectColumn["TransactionCreatedTimestamp"] = "transaction_created_timestamp";
    CoinInfosSelectColumn["TransactionVersionCreated"] = "transaction_version_created";
})(CoinInfosSelectColumn = exports.CoinInfosSelectColumn || (exports.CoinInfosSelectColumn = {}));
var CoinSupplySelectColumn;
(function (CoinSupplySelectColumn) {
    CoinSupplySelectColumn["CoinType"] = "coin_type";
    CoinSupplySelectColumn["CoinTypeHash"] = "coin_type_hash";
    CoinSupplySelectColumn["Supply"] = "supply";
    CoinSupplySelectColumn["TransactionEpoch"] = "transaction_epoch";
    CoinSupplySelectColumn["TransactionTimestamp"] = "transaction_timestamp";
    CoinSupplySelectColumn["TransactionVersion"] = "transaction_version";
})(CoinSupplySelectColumn = exports.CoinSupplySelectColumn || (exports.CoinSupplySelectColumn = {}));
var CollectionDatasSelectColumn;
(function (CollectionDatasSelectColumn) {
    CollectionDatasSelectColumn["CollectionDataIdHash"] = "collection_data_id_hash";
    CollectionDatasSelectColumn["CollectionName"] = "collection_name";
    CollectionDatasSelectColumn["CreatorAddress"] = "creator_address";
    CollectionDatasSelectColumn["Description"] = "description";
    CollectionDatasSelectColumn["DescriptionMutable"] = "description_mutable";
    CollectionDatasSelectColumn["Maximum"] = "maximum";
    CollectionDatasSelectColumn["MaximumMutable"] = "maximum_mutable";
    CollectionDatasSelectColumn["MetadataUri"] = "metadata_uri";
    CollectionDatasSelectColumn["Supply"] = "supply";
    CollectionDatasSelectColumn["TableHandle"] = "table_handle";
    CollectionDatasSelectColumn["TransactionTimestamp"] = "transaction_timestamp";
    CollectionDatasSelectColumn["TransactionVersion"] = "transaction_version";
    CollectionDatasSelectColumn["UriMutable"] = "uri_mutable";
})(CollectionDatasSelectColumn = exports.CollectionDatasSelectColumn || (exports.CollectionDatasSelectColumn = {}));
var CurrentAnsLookupSelectColumn;
(function (CurrentAnsLookupSelectColumn) {
    CurrentAnsLookupSelectColumn["Domain"] = "domain";
    CurrentAnsLookupSelectColumn["ExpirationTimestamp"] = "expiration_timestamp";
    CurrentAnsLookupSelectColumn["IsDeleted"] = "is_deleted";
    CurrentAnsLookupSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentAnsLookupSelectColumn["RegisteredAddress"] = "registered_address";
    CurrentAnsLookupSelectColumn["Subdomain"] = "subdomain";
    CurrentAnsLookupSelectColumn["TokenName"] = "token_name";
})(CurrentAnsLookupSelectColumn = exports.CurrentAnsLookupSelectColumn || (exports.CurrentAnsLookupSelectColumn = {}));
var CurrentAnsLookupV2SelectColumn;
(function (CurrentAnsLookupV2SelectColumn) {
    CurrentAnsLookupV2SelectColumn["Domain"] = "domain";
    CurrentAnsLookupV2SelectColumn["ExpirationTimestamp"] = "expiration_timestamp";
    CurrentAnsLookupV2SelectColumn["IsDeleted"] = "is_deleted";
    CurrentAnsLookupV2SelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentAnsLookupV2SelectColumn["RegisteredAddress"] = "registered_address";
    CurrentAnsLookupV2SelectColumn["Subdomain"] = "subdomain";
    CurrentAnsLookupV2SelectColumn["TokenName"] = "token_name";
    CurrentAnsLookupV2SelectColumn["TokenStandard"] = "token_standard";
})(CurrentAnsLookupV2SelectColumn = exports.CurrentAnsLookupV2SelectColumn || (exports.CurrentAnsLookupV2SelectColumn = {}));
var CurrentAptosNamesSelectColumn;
(function (CurrentAptosNamesSelectColumn) {
    CurrentAptosNamesSelectColumn["Domain"] = "domain";
    CurrentAptosNamesSelectColumn["DomainWithSuffix"] = "domain_with_suffix";
    CurrentAptosNamesSelectColumn["ExpirationTimestamp"] = "expiration_timestamp";
    CurrentAptosNamesSelectColumn["IsActive"] = "is_active";
    CurrentAptosNamesSelectColumn["IsPrimary"] = "is_primary";
    CurrentAptosNamesSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentAptosNamesSelectColumn["OwnerAddress"] = "owner_address";
    CurrentAptosNamesSelectColumn["RegisteredAddress"] = "registered_address";
    CurrentAptosNamesSelectColumn["Subdomain"] = "subdomain";
    CurrentAptosNamesSelectColumn["TokenName"] = "token_name";
    CurrentAptosNamesSelectColumn["TokenStandard"] = "token_standard";
})(CurrentAptosNamesSelectColumn = exports.CurrentAptosNamesSelectColumn || (exports.CurrentAptosNamesSelectColumn = {}));
var CurrentCoinBalancesSelectColumn;
(function (CurrentCoinBalancesSelectColumn) {
    CurrentCoinBalancesSelectColumn["Amount"] = "amount";
    CurrentCoinBalancesSelectColumn["CoinType"] = "coin_type";
    CurrentCoinBalancesSelectColumn["CoinTypeHash"] = "coin_type_hash";
    CurrentCoinBalancesSelectColumn["LastTransactionTimestamp"] = "last_transaction_timestamp";
    CurrentCoinBalancesSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentCoinBalancesSelectColumn["OwnerAddress"] = "owner_address";
})(CurrentCoinBalancesSelectColumn = exports.CurrentCoinBalancesSelectColumn || (exports.CurrentCoinBalancesSelectColumn = {}));
var CurrentCollectionDatasSelectColumn;
(function (CurrentCollectionDatasSelectColumn) {
    CurrentCollectionDatasSelectColumn["CollectionDataIdHash"] = "collection_data_id_hash";
    CurrentCollectionDatasSelectColumn["CollectionName"] = "collection_name";
    CurrentCollectionDatasSelectColumn["CreatorAddress"] = "creator_address";
    CurrentCollectionDatasSelectColumn["Description"] = "description";
    CurrentCollectionDatasSelectColumn["DescriptionMutable"] = "description_mutable";
    CurrentCollectionDatasSelectColumn["LastTransactionTimestamp"] = "last_transaction_timestamp";
    CurrentCollectionDatasSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentCollectionDatasSelectColumn["Maximum"] = "maximum";
    CurrentCollectionDatasSelectColumn["MaximumMutable"] = "maximum_mutable";
    CurrentCollectionDatasSelectColumn["MetadataUri"] = "metadata_uri";
    CurrentCollectionDatasSelectColumn["Supply"] = "supply";
    CurrentCollectionDatasSelectColumn["TableHandle"] = "table_handle";
    CurrentCollectionDatasSelectColumn["UriMutable"] = "uri_mutable";
})(CurrentCollectionDatasSelectColumn = exports.CurrentCollectionDatasSelectColumn || (exports.CurrentCollectionDatasSelectColumn = {}));
var CurrentCollectionOwnershipV2ViewSelectColumn;
(function (CurrentCollectionOwnershipV2ViewSelectColumn) {
    CurrentCollectionOwnershipV2ViewSelectColumn["CollectionId"] = "collection_id";
    CurrentCollectionOwnershipV2ViewSelectColumn["CollectionName"] = "collection_name";
    CurrentCollectionOwnershipV2ViewSelectColumn["CollectionUri"] = "collection_uri";
    CurrentCollectionOwnershipV2ViewSelectColumn["CreatorAddress"] = "creator_address";
    CurrentCollectionOwnershipV2ViewSelectColumn["DistinctTokens"] = "distinct_tokens";
    CurrentCollectionOwnershipV2ViewSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentCollectionOwnershipV2ViewSelectColumn["OwnerAddress"] = "owner_address";
    CurrentCollectionOwnershipV2ViewSelectColumn["SingleTokenUri"] = "single_token_uri";
})(CurrentCollectionOwnershipV2ViewSelectColumn = exports.CurrentCollectionOwnershipV2ViewSelectColumn || (exports.CurrentCollectionOwnershipV2ViewSelectColumn = {}));
var CurrentCollectionsV2SelectColumn;
(function (CurrentCollectionsV2SelectColumn) {
    CurrentCollectionsV2SelectColumn["CollectionId"] = "collection_id";
    CurrentCollectionsV2SelectColumn["CollectionName"] = "collection_name";
    CurrentCollectionsV2SelectColumn["CreatorAddress"] = "creator_address";
    CurrentCollectionsV2SelectColumn["CurrentSupply"] = "current_supply";
    CurrentCollectionsV2SelectColumn["Description"] = "description";
    CurrentCollectionsV2SelectColumn["LastTransactionTimestamp"] = "last_transaction_timestamp";
    CurrentCollectionsV2SelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentCollectionsV2SelectColumn["MaxSupply"] = "max_supply";
    CurrentCollectionsV2SelectColumn["MutableDescription"] = "mutable_description";
    CurrentCollectionsV2SelectColumn["MutableUri"] = "mutable_uri";
    CurrentCollectionsV2SelectColumn["TableHandleV1"] = "table_handle_v1";
    CurrentCollectionsV2SelectColumn["TokenStandard"] = "token_standard";
    CurrentCollectionsV2SelectColumn["TotalMintedV2"] = "total_minted_v2";
    CurrentCollectionsV2SelectColumn["Uri"] = "uri";
})(CurrentCollectionsV2SelectColumn = exports.CurrentCollectionsV2SelectColumn || (exports.CurrentCollectionsV2SelectColumn = {}));
var CurrentDelegatedStakingPoolBalancesSelectColumn;
(function (CurrentDelegatedStakingPoolBalancesSelectColumn) {
    CurrentDelegatedStakingPoolBalancesSelectColumn["ActiveTableHandle"] = "active_table_handle";
    CurrentDelegatedStakingPoolBalancesSelectColumn["InactiveTableHandle"] = "inactive_table_handle";
    CurrentDelegatedStakingPoolBalancesSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentDelegatedStakingPoolBalancesSelectColumn["OperatorCommissionPercentage"] = "operator_commission_percentage";
    CurrentDelegatedStakingPoolBalancesSelectColumn["StakingPoolAddress"] = "staking_pool_address";
    CurrentDelegatedStakingPoolBalancesSelectColumn["TotalCoins"] = "total_coins";
    CurrentDelegatedStakingPoolBalancesSelectColumn["TotalShares"] = "total_shares";
})(CurrentDelegatedStakingPoolBalancesSelectColumn = exports.CurrentDelegatedStakingPoolBalancesSelectColumn || (exports.CurrentDelegatedStakingPoolBalancesSelectColumn = {}));
var CurrentDelegatedVoterSelectColumn;
(function (CurrentDelegatedVoterSelectColumn) {
    CurrentDelegatedVoterSelectColumn["DelegationPoolAddress"] = "delegation_pool_address";
    CurrentDelegatedVoterSelectColumn["DelegatorAddress"] = "delegator_address";
    CurrentDelegatedVoterSelectColumn["LastTransactionTimestamp"] = "last_transaction_timestamp";
    CurrentDelegatedVoterSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentDelegatedVoterSelectColumn["PendingVoter"] = "pending_voter";
    CurrentDelegatedVoterSelectColumn["TableHandle"] = "table_handle";
    CurrentDelegatedVoterSelectColumn["Voter"] = "voter";
})(CurrentDelegatedVoterSelectColumn = exports.CurrentDelegatedVoterSelectColumn || (exports.CurrentDelegatedVoterSelectColumn = {}));
var CurrentDelegatorBalancesSelectColumn;
(function (CurrentDelegatorBalancesSelectColumn) {
    CurrentDelegatorBalancesSelectColumn["DelegatorAddress"] = "delegator_address";
    CurrentDelegatorBalancesSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentDelegatorBalancesSelectColumn["ParentTableHandle"] = "parent_table_handle";
    CurrentDelegatorBalancesSelectColumn["PoolAddress"] = "pool_address";
    CurrentDelegatorBalancesSelectColumn["PoolType"] = "pool_type";
    CurrentDelegatorBalancesSelectColumn["Shares"] = "shares";
    CurrentDelegatorBalancesSelectColumn["TableHandle"] = "table_handle";
})(CurrentDelegatorBalancesSelectColumn = exports.CurrentDelegatorBalancesSelectColumn || (exports.CurrentDelegatorBalancesSelectColumn = {}));
var CurrentFungibleAssetBalancesSelectColumn;
(function (CurrentFungibleAssetBalancesSelectColumn) {
    CurrentFungibleAssetBalancesSelectColumn["Amount"] = "amount";
    CurrentFungibleAssetBalancesSelectColumn["AssetType"] = "asset_type";
    CurrentFungibleAssetBalancesSelectColumn["IsFrozen"] = "is_frozen";
    CurrentFungibleAssetBalancesSelectColumn["IsPrimary"] = "is_primary";
    CurrentFungibleAssetBalancesSelectColumn["LastTransactionTimestamp"] = "last_transaction_timestamp";
    CurrentFungibleAssetBalancesSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentFungibleAssetBalancesSelectColumn["OwnerAddress"] = "owner_address";
    CurrentFungibleAssetBalancesSelectColumn["StorageId"] = "storage_id";
    CurrentFungibleAssetBalancesSelectColumn["TokenStandard"] = "token_standard";
})(CurrentFungibleAssetBalancesSelectColumn = exports.CurrentFungibleAssetBalancesSelectColumn || (exports.CurrentFungibleAssetBalancesSelectColumn = {}));
var CurrentObjectsSelectColumn;
(function (CurrentObjectsSelectColumn) {
    CurrentObjectsSelectColumn["AllowUngatedTransfer"] = "allow_ungated_transfer";
    CurrentObjectsSelectColumn["IsDeleted"] = "is_deleted";
    CurrentObjectsSelectColumn["LastGuidCreationNum"] = "last_guid_creation_num";
    CurrentObjectsSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentObjectsSelectColumn["ObjectAddress"] = "object_address";
    CurrentObjectsSelectColumn["OwnerAddress"] = "owner_address";
    CurrentObjectsSelectColumn["StateKeyHash"] = "state_key_hash";
})(CurrentObjectsSelectColumn = exports.CurrentObjectsSelectColumn || (exports.CurrentObjectsSelectColumn = {}));
var CurrentStakingPoolVoterSelectColumn;
(function (CurrentStakingPoolVoterSelectColumn) {
    CurrentStakingPoolVoterSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentStakingPoolVoterSelectColumn["OperatorAddress"] = "operator_address";
    CurrentStakingPoolVoterSelectColumn["StakingPoolAddress"] = "staking_pool_address";
    CurrentStakingPoolVoterSelectColumn["VoterAddress"] = "voter_address";
})(CurrentStakingPoolVoterSelectColumn = exports.CurrentStakingPoolVoterSelectColumn || (exports.CurrentStakingPoolVoterSelectColumn = {}));
var CurrentTableItemsSelectColumn;
(function (CurrentTableItemsSelectColumn) {
    CurrentTableItemsSelectColumn["DecodedKey"] = "decoded_key";
    CurrentTableItemsSelectColumn["DecodedValue"] = "decoded_value";
    CurrentTableItemsSelectColumn["IsDeleted"] = "is_deleted";
    CurrentTableItemsSelectColumn["Key"] = "key";
    CurrentTableItemsSelectColumn["KeyHash"] = "key_hash";
    CurrentTableItemsSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentTableItemsSelectColumn["TableHandle"] = "table_handle";
})(CurrentTableItemsSelectColumn = exports.CurrentTableItemsSelectColumn || (exports.CurrentTableItemsSelectColumn = {}));
var CurrentTokenDatasSelectColumn;
(function (CurrentTokenDatasSelectColumn) {
    CurrentTokenDatasSelectColumn["CollectionDataIdHash"] = "collection_data_id_hash";
    CurrentTokenDatasSelectColumn["CollectionName"] = "collection_name";
    CurrentTokenDatasSelectColumn["CreatorAddress"] = "creator_address";
    CurrentTokenDatasSelectColumn["DefaultProperties"] = "default_properties";
    CurrentTokenDatasSelectColumn["Description"] = "description";
    CurrentTokenDatasSelectColumn["DescriptionMutable"] = "description_mutable";
    CurrentTokenDatasSelectColumn["LargestPropertyVersion"] = "largest_property_version";
    CurrentTokenDatasSelectColumn["LastTransactionTimestamp"] = "last_transaction_timestamp";
    CurrentTokenDatasSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentTokenDatasSelectColumn["Maximum"] = "maximum";
    CurrentTokenDatasSelectColumn["MaximumMutable"] = "maximum_mutable";
    CurrentTokenDatasSelectColumn["MetadataUri"] = "metadata_uri";
    CurrentTokenDatasSelectColumn["Name"] = "name";
    CurrentTokenDatasSelectColumn["PayeeAddress"] = "payee_address";
    CurrentTokenDatasSelectColumn["PropertiesMutable"] = "properties_mutable";
    CurrentTokenDatasSelectColumn["RoyaltyMutable"] = "royalty_mutable";
    CurrentTokenDatasSelectColumn["RoyaltyPointsDenominator"] = "royalty_points_denominator";
    CurrentTokenDatasSelectColumn["RoyaltyPointsNumerator"] = "royalty_points_numerator";
    CurrentTokenDatasSelectColumn["Supply"] = "supply";
    CurrentTokenDatasSelectColumn["TokenDataIdHash"] = "token_data_id_hash";
    CurrentTokenDatasSelectColumn["UriMutable"] = "uri_mutable";
})(CurrentTokenDatasSelectColumn = exports.CurrentTokenDatasSelectColumn || (exports.CurrentTokenDatasSelectColumn = {}));
var CurrentTokenDatasV2SelectColumn;
(function (CurrentTokenDatasV2SelectColumn) {
    CurrentTokenDatasV2SelectColumn["CollectionId"] = "collection_id";
    CurrentTokenDatasV2SelectColumn["Description"] = "description";
    CurrentTokenDatasV2SelectColumn["IsFungibleV2"] = "is_fungible_v2";
    CurrentTokenDatasV2SelectColumn["LargestPropertyVersionV1"] = "largest_property_version_v1";
    CurrentTokenDatasV2SelectColumn["LastTransactionTimestamp"] = "last_transaction_timestamp";
    CurrentTokenDatasV2SelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentTokenDatasV2SelectColumn["Maximum"] = "maximum";
    CurrentTokenDatasV2SelectColumn["Supply"] = "supply";
    CurrentTokenDatasV2SelectColumn["TokenDataId"] = "token_data_id";
    CurrentTokenDatasV2SelectColumn["TokenName"] = "token_name";
    CurrentTokenDatasV2SelectColumn["TokenProperties"] = "token_properties";
    CurrentTokenDatasV2SelectColumn["TokenStandard"] = "token_standard";
    CurrentTokenDatasV2SelectColumn["TokenUri"] = "token_uri";
})(CurrentTokenDatasV2SelectColumn = exports.CurrentTokenDatasV2SelectColumn || (exports.CurrentTokenDatasV2SelectColumn = {}));
var CurrentTokenOwnershipsSelectColumn;
(function (CurrentTokenOwnershipsSelectColumn) {
    CurrentTokenOwnershipsSelectColumn["Amount"] = "amount";
    CurrentTokenOwnershipsSelectColumn["CollectionDataIdHash"] = "collection_data_id_hash";
    CurrentTokenOwnershipsSelectColumn["CollectionName"] = "collection_name";
    CurrentTokenOwnershipsSelectColumn["CreatorAddress"] = "creator_address";
    CurrentTokenOwnershipsSelectColumn["LastTransactionTimestamp"] = "last_transaction_timestamp";
    CurrentTokenOwnershipsSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentTokenOwnershipsSelectColumn["Name"] = "name";
    CurrentTokenOwnershipsSelectColumn["OwnerAddress"] = "owner_address";
    CurrentTokenOwnershipsSelectColumn["PropertyVersion"] = "property_version";
    CurrentTokenOwnershipsSelectColumn["TableType"] = "table_type";
    CurrentTokenOwnershipsSelectColumn["TokenDataIdHash"] = "token_data_id_hash";
    CurrentTokenOwnershipsSelectColumn["TokenProperties"] = "token_properties";
})(CurrentTokenOwnershipsSelectColumn = exports.CurrentTokenOwnershipsSelectColumn || (exports.CurrentTokenOwnershipsSelectColumn = {}));
var CurrentTokenOwnershipsV2SelectColumn;
(function (CurrentTokenOwnershipsV2SelectColumn) {
    CurrentTokenOwnershipsV2SelectColumn["Amount"] = "amount";
    CurrentTokenOwnershipsV2SelectColumn["IsFungibleV2"] = "is_fungible_v2";
    CurrentTokenOwnershipsV2SelectColumn["IsSoulboundV2"] = "is_soulbound_v2";
    CurrentTokenOwnershipsV2SelectColumn["LastTransactionTimestamp"] = "last_transaction_timestamp";
    CurrentTokenOwnershipsV2SelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentTokenOwnershipsV2SelectColumn["OwnerAddress"] = "owner_address";
    CurrentTokenOwnershipsV2SelectColumn["PropertyVersionV1"] = "property_version_v1";
    CurrentTokenOwnershipsV2SelectColumn["StorageId"] = "storage_id";
    CurrentTokenOwnershipsV2SelectColumn["TableTypeV1"] = "table_type_v1";
    CurrentTokenOwnershipsV2SelectColumn["TokenDataId"] = "token_data_id";
    CurrentTokenOwnershipsV2SelectColumn["TokenPropertiesMutatedV1"] = "token_properties_mutated_v1";
    CurrentTokenOwnershipsV2SelectColumn["TokenStandard"] = "token_standard";
})(CurrentTokenOwnershipsV2SelectColumn = exports.CurrentTokenOwnershipsV2SelectColumn || (exports.CurrentTokenOwnershipsV2SelectColumn = {}));
var CurrentTokenPendingClaimsSelectColumn;
(function (CurrentTokenPendingClaimsSelectColumn) {
    CurrentTokenPendingClaimsSelectColumn["Amount"] = "amount";
    CurrentTokenPendingClaimsSelectColumn["CollectionDataIdHash"] = "collection_data_id_hash";
    CurrentTokenPendingClaimsSelectColumn["CollectionId"] = "collection_id";
    CurrentTokenPendingClaimsSelectColumn["CollectionName"] = "collection_name";
    CurrentTokenPendingClaimsSelectColumn["CreatorAddress"] = "creator_address";
    CurrentTokenPendingClaimsSelectColumn["FromAddress"] = "from_address";
    CurrentTokenPendingClaimsSelectColumn["LastTransactionTimestamp"] = "last_transaction_timestamp";
    CurrentTokenPendingClaimsSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    CurrentTokenPendingClaimsSelectColumn["Name"] = "name";
    CurrentTokenPendingClaimsSelectColumn["PropertyVersion"] = "property_version";
    CurrentTokenPendingClaimsSelectColumn["TableHandle"] = "table_handle";
    CurrentTokenPendingClaimsSelectColumn["ToAddress"] = "to_address";
    CurrentTokenPendingClaimsSelectColumn["TokenDataId"] = "token_data_id";
    CurrentTokenPendingClaimsSelectColumn["TokenDataIdHash"] = "token_data_id_hash";
})(CurrentTokenPendingClaimsSelectColumn = exports.CurrentTokenPendingClaimsSelectColumn || (exports.CurrentTokenPendingClaimsSelectColumn = {}));
var CursorOrdering;
(function (CursorOrdering) {
    CursorOrdering["Asc"] = "ASC";
    CursorOrdering["Desc"] = "DESC";
})(CursorOrdering = exports.CursorOrdering || (exports.CursorOrdering = {}));
var DelegatedStakingActivitiesSelectColumn;
(function (DelegatedStakingActivitiesSelectColumn) {
    DelegatedStakingActivitiesSelectColumn["Amount"] = "amount";
    DelegatedStakingActivitiesSelectColumn["DelegatorAddress"] = "delegator_address";
    DelegatedStakingActivitiesSelectColumn["EventIndex"] = "event_index";
    DelegatedStakingActivitiesSelectColumn["EventType"] = "event_type";
    DelegatedStakingActivitiesSelectColumn["PoolAddress"] = "pool_address";
    DelegatedStakingActivitiesSelectColumn["TransactionVersion"] = "transaction_version";
})(DelegatedStakingActivitiesSelectColumn = exports.DelegatedStakingActivitiesSelectColumn || (exports.DelegatedStakingActivitiesSelectColumn = {}));
var DelegatedStakingPoolsSelectColumn;
(function (DelegatedStakingPoolsSelectColumn) {
    DelegatedStakingPoolsSelectColumn["FirstTransactionVersion"] = "first_transaction_version";
    DelegatedStakingPoolsSelectColumn["StakingPoolAddress"] = "staking_pool_address";
})(DelegatedStakingPoolsSelectColumn = exports.DelegatedStakingPoolsSelectColumn || (exports.DelegatedStakingPoolsSelectColumn = {}));
var DelegatorDistinctPoolSelectColumn;
(function (DelegatorDistinctPoolSelectColumn) {
    DelegatorDistinctPoolSelectColumn["DelegatorAddress"] = "delegator_address";
    DelegatorDistinctPoolSelectColumn["PoolAddress"] = "pool_address";
})(DelegatorDistinctPoolSelectColumn = exports.DelegatorDistinctPoolSelectColumn || (exports.DelegatorDistinctPoolSelectColumn = {}));
var EventsSelectColumn;
(function (EventsSelectColumn) {
    EventsSelectColumn["AccountAddress"] = "account_address";
    EventsSelectColumn["CreationNumber"] = "creation_number";
    EventsSelectColumn["Data"] = "data";
    EventsSelectColumn["EventIndex"] = "event_index";
    EventsSelectColumn["IndexedType"] = "indexed_type";
    EventsSelectColumn["SequenceNumber"] = "sequence_number";
    EventsSelectColumn["TransactionBlockHeight"] = "transaction_block_height";
    EventsSelectColumn["TransactionVersion"] = "transaction_version";
    EventsSelectColumn["Type"] = "type";
})(EventsSelectColumn = exports.EventsSelectColumn || (exports.EventsSelectColumn = {}));
var FungibleAssetActivitiesSelectColumn;
(function (FungibleAssetActivitiesSelectColumn) {
    FungibleAssetActivitiesSelectColumn["Amount"] = "amount";
    FungibleAssetActivitiesSelectColumn["AssetType"] = "asset_type";
    FungibleAssetActivitiesSelectColumn["BlockHeight"] = "block_height";
    FungibleAssetActivitiesSelectColumn["EntryFunctionIdStr"] = "entry_function_id_str";
    FungibleAssetActivitiesSelectColumn["EventIndex"] = "event_index";
    FungibleAssetActivitiesSelectColumn["GasFeePayerAddress"] = "gas_fee_payer_address";
    FungibleAssetActivitiesSelectColumn["IsFrozen"] = "is_frozen";
    FungibleAssetActivitiesSelectColumn["IsGasFee"] = "is_gas_fee";
    FungibleAssetActivitiesSelectColumn["IsTransactionSuccess"] = "is_transaction_success";
    FungibleAssetActivitiesSelectColumn["OwnerAddress"] = "owner_address";
    FungibleAssetActivitiesSelectColumn["StorageId"] = "storage_id";
    FungibleAssetActivitiesSelectColumn["StorageRefundAmount"] = "storage_refund_amount";
    FungibleAssetActivitiesSelectColumn["TokenStandard"] = "token_standard";
    FungibleAssetActivitiesSelectColumn["TransactionTimestamp"] = "transaction_timestamp";
    FungibleAssetActivitiesSelectColumn["TransactionVersion"] = "transaction_version";
    FungibleAssetActivitiesSelectColumn["Type"] = "type";
})(FungibleAssetActivitiesSelectColumn = exports.FungibleAssetActivitiesSelectColumn || (exports.FungibleAssetActivitiesSelectColumn = {}));
var FungibleAssetMetadataSelectColumn;
(function (FungibleAssetMetadataSelectColumn) {
    FungibleAssetMetadataSelectColumn["AssetType"] = "asset_type";
    FungibleAssetMetadataSelectColumn["CreatorAddress"] = "creator_address";
    FungibleAssetMetadataSelectColumn["Decimals"] = "decimals";
    FungibleAssetMetadataSelectColumn["IconUri"] = "icon_uri";
    FungibleAssetMetadataSelectColumn["LastTransactionTimestamp"] = "last_transaction_timestamp";
    FungibleAssetMetadataSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    FungibleAssetMetadataSelectColumn["Name"] = "name";
    FungibleAssetMetadataSelectColumn["ProjectUri"] = "project_uri";
    FungibleAssetMetadataSelectColumn["SupplyAggregatorTableHandleV1"] = "supply_aggregator_table_handle_v1";
    FungibleAssetMetadataSelectColumn["SupplyAggregatorTableKeyV1"] = "supply_aggregator_table_key_v1";
    FungibleAssetMetadataSelectColumn["Symbol"] = "symbol";
    FungibleAssetMetadataSelectColumn["TokenStandard"] = "token_standard";
})(FungibleAssetMetadataSelectColumn = exports.FungibleAssetMetadataSelectColumn || (exports.FungibleAssetMetadataSelectColumn = {}));
var IndexerStatusSelectColumn;
(function (IndexerStatusSelectColumn) {
    IndexerStatusSelectColumn["Db"] = "db";
    IndexerStatusSelectColumn["IsIndexerUp"] = "is_indexer_up";
})(IndexerStatusSelectColumn = exports.IndexerStatusSelectColumn || (exports.IndexerStatusSelectColumn = {}));
var LedgerInfosSelectColumn;
(function (LedgerInfosSelectColumn) {
    LedgerInfosSelectColumn["ChainId"] = "chain_id";
})(LedgerInfosSelectColumn = exports.LedgerInfosSelectColumn || (exports.LedgerInfosSelectColumn = {}));
var MoveResourcesSelectColumn;
(function (MoveResourcesSelectColumn) {
    MoveResourcesSelectColumn["Address"] = "address";
    MoveResourcesSelectColumn["TransactionVersion"] = "transaction_version";
})(MoveResourcesSelectColumn = exports.MoveResourcesSelectColumn || (exports.MoveResourcesSelectColumn = {}));
var NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn;
(function (NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn) {
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["BuyItNowPrice"] = "buy_it_now_price";
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["CoinType"] = "coin_type";
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["CollectionId"] = "collection_id";
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["ContractAddress"] = "contract_address";
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["CurrentBidPrice"] = "current_bid_price";
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["CurrentBidder"] = "current_bidder";
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["EntryFunctionIdStr"] = "entry_function_id_str";
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["ExpirationTime"] = "expiration_time";
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["FeeScheduleId"] = "fee_schedule_id";
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["IsDeleted"] = "is_deleted";
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["LastTransactionTimestamp"] = "last_transaction_timestamp";
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["ListingId"] = "listing_id";
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["Marketplace"] = "marketplace";
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["Seller"] = "seller";
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["StartingBidPrice"] = "starting_bid_price";
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["TokenAmount"] = "token_amount";
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["TokenDataId"] = "token_data_id";
    NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn["TokenStandard"] = "token_standard";
})(NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn = exports.NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn || (exports.NftMarketplaceV2CurrentNftMarketplaceAuctionsSelectColumn = {}));
var NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn;
(function (NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn) {
    NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn["Buyer"] = "buyer";
    NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn["CoinType"] = "coin_type";
    NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn["CollectionId"] = "collection_id";
    NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn["CollectionOfferId"] = "collection_offer_id";
    NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn["ContractAddress"] = "contract_address";
    NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn["EntryFunctionIdStr"] = "entry_function_id_str";
    NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn["ExpirationTime"] = "expiration_time";
    NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn["FeeScheduleId"] = "fee_schedule_id";
    NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn["IsDeleted"] = "is_deleted";
    NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn["ItemPrice"] = "item_price";
    NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn["LastTransactionTimestamp"] = "last_transaction_timestamp";
    NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn["Marketplace"] = "marketplace";
    NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn["RemainingTokenAmount"] = "remaining_token_amount";
    NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn["TokenStandard"] = "token_standard";
})(NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn = exports.NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn || (exports.NftMarketplaceV2CurrentNftMarketplaceCollectionOffersSelectColumn = {}));
var NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn;
(function (NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn) {
    NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn["CoinType"] = "coin_type";
    NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn["CollectionId"] = "collection_id";
    NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn["ContractAddress"] = "contract_address";
    NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn["EntryFunctionIdStr"] = "entry_function_id_str";
    NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn["FeeScheduleId"] = "fee_schedule_id";
    NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn["IsDeleted"] = "is_deleted";
    NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn["LastTransactionTimestamp"] = "last_transaction_timestamp";
    NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn["ListingId"] = "listing_id";
    NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn["Marketplace"] = "marketplace";
    NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn["Price"] = "price";
    NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn["Seller"] = "seller";
    NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn["TokenAmount"] = "token_amount";
    NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn["TokenDataId"] = "token_data_id";
    NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn["TokenStandard"] = "token_standard";
})(NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn = exports.NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn || (exports.NftMarketplaceV2CurrentNftMarketplaceListingsSelectColumn = {}));
var NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn;
(function (NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn) {
    NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn["Buyer"] = "buyer";
    NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn["CoinType"] = "coin_type";
    NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn["CollectionId"] = "collection_id";
    NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn["ContractAddress"] = "contract_address";
    NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn["EntryFunctionIdStr"] = "entry_function_id_str";
    NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn["ExpirationTime"] = "expiration_time";
    NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn["FeeScheduleId"] = "fee_schedule_id";
    NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn["IsDeleted"] = "is_deleted";
    NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn["LastTransactionTimestamp"] = "last_transaction_timestamp";
    NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn["LastTransactionVersion"] = "last_transaction_version";
    NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn["Marketplace"] = "marketplace";
    NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn["OfferId"] = "offer_id";
    NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn["Price"] = "price";
    NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn["TokenAmount"] = "token_amount";
    NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn["TokenDataId"] = "token_data_id";
    NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn["TokenStandard"] = "token_standard";
})(NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn = exports.NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn || (exports.NftMarketplaceV2CurrentNftMarketplaceTokenOffersSelectColumn = {}));
var NftMarketplaceV2NftMarketplaceActivitiesSelectColumn;
(function (NftMarketplaceV2NftMarketplaceActivitiesSelectColumn) {
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["Buyer"] = "buyer";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["CoinType"] = "coin_type";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["CollectionId"] = "collection_id";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["CollectionName"] = "collection_name";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["ContractAddress"] = "contract_address";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["CreatorAddress"] = "creator_address";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["EntryFunctionIdStr"] = "entry_function_id_str";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["EventIndex"] = "event_index";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["EventType"] = "event_type";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["FeeScheduleId"] = "fee_schedule_id";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["Marketplace"] = "marketplace";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["OfferOrListingId"] = "offer_or_listing_id";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["Price"] = "price";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["PropertyVersion"] = "property_version";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["Seller"] = "seller";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["TokenAmount"] = "token_amount";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["TokenDataId"] = "token_data_id";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["TokenName"] = "token_name";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["TokenStandard"] = "token_standard";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["TransactionTimestamp"] = "transaction_timestamp";
    NftMarketplaceV2NftMarketplaceActivitiesSelectColumn["TransactionVersion"] = "transaction_version";
})(NftMarketplaceV2NftMarketplaceActivitiesSelectColumn = exports.NftMarketplaceV2NftMarketplaceActivitiesSelectColumn || (exports.NftMarketplaceV2NftMarketplaceActivitiesSelectColumn = {}));
var NftMetadataCrawlerParsedAssetUrisSelectColumn;
(function (NftMetadataCrawlerParsedAssetUrisSelectColumn) {
    NftMetadataCrawlerParsedAssetUrisSelectColumn["AnimationOptimizerRetryCount"] = "animation_optimizer_retry_count";
    NftMetadataCrawlerParsedAssetUrisSelectColumn["AssetUri"] = "asset_uri";
    NftMetadataCrawlerParsedAssetUrisSelectColumn["CdnAnimationUri"] = "cdn_animation_uri";
    NftMetadataCrawlerParsedAssetUrisSelectColumn["CdnImageUri"] = "cdn_image_uri";
    NftMetadataCrawlerParsedAssetUrisSelectColumn["CdnJsonUri"] = "cdn_json_uri";
    NftMetadataCrawlerParsedAssetUrisSelectColumn["ImageOptimizerRetryCount"] = "image_optimizer_retry_count";
    NftMetadataCrawlerParsedAssetUrisSelectColumn["JsonParserRetryCount"] = "json_parser_retry_count";
    NftMetadataCrawlerParsedAssetUrisSelectColumn["RawAnimationUri"] = "raw_animation_uri";
    NftMetadataCrawlerParsedAssetUrisSelectColumn["RawImageUri"] = "raw_image_uri";
})(NftMetadataCrawlerParsedAssetUrisSelectColumn = exports.NftMetadataCrawlerParsedAssetUrisSelectColumn || (exports.NftMetadataCrawlerParsedAssetUrisSelectColumn = {}));
var NumActiveDelegatorPerPoolSelectColumn;
(function (NumActiveDelegatorPerPoolSelectColumn) {
    NumActiveDelegatorPerPoolSelectColumn["NumActiveDelegator"] = "num_active_delegator";
    NumActiveDelegatorPerPoolSelectColumn["PoolAddress"] = "pool_address";
})(NumActiveDelegatorPerPoolSelectColumn = exports.NumActiveDelegatorPerPoolSelectColumn || (exports.NumActiveDelegatorPerPoolSelectColumn = {}));
var OrderBy;
(function (OrderBy) {
    OrderBy["Asc"] = "asc";
    OrderBy["AscNullsFirst"] = "asc_nulls_first";
    OrderBy["AscNullsLast"] = "asc_nulls_last";
    OrderBy["Desc"] = "desc";
    OrderBy["DescNullsFirst"] = "desc_nulls_first";
    OrderBy["DescNullsLast"] = "desc_nulls_last";
})(OrderBy = exports.OrderBy || (exports.OrderBy = {}));
var ProcessorStatusSelectColumn;
(function (ProcessorStatusSelectColumn) {
    ProcessorStatusSelectColumn["LastSuccessVersion"] = "last_success_version";
    ProcessorStatusSelectColumn["LastUpdated"] = "last_updated";
    ProcessorStatusSelectColumn["Processor"] = "processor";
})(ProcessorStatusSelectColumn = exports.ProcessorStatusSelectColumn || (exports.ProcessorStatusSelectColumn = {}));
var ProposalVotesSelectColumn;
(function (ProposalVotesSelectColumn) {
    ProposalVotesSelectColumn["NumVotes"] = "num_votes";
    ProposalVotesSelectColumn["ProposalId"] = "proposal_id";
    ProposalVotesSelectColumn["ShouldPass"] = "should_pass";
    ProposalVotesSelectColumn["StakingPoolAddress"] = "staking_pool_address";
    ProposalVotesSelectColumn["TransactionTimestamp"] = "transaction_timestamp";
    ProposalVotesSelectColumn["TransactionVersion"] = "transaction_version";
    ProposalVotesSelectColumn["VoterAddress"] = "voter_address";
})(ProposalVotesSelectColumn = exports.ProposalVotesSelectColumn || (exports.ProposalVotesSelectColumn = {}));
var TableItemsSelectColumn;
(function (TableItemsSelectColumn) {
    TableItemsSelectColumn["DecodedKey"] = "decoded_key";
    TableItemsSelectColumn["DecodedValue"] = "decoded_value";
    TableItemsSelectColumn["Key"] = "key";
    TableItemsSelectColumn["TableHandle"] = "table_handle";
    TableItemsSelectColumn["TransactionVersion"] = "transaction_version";
    TableItemsSelectColumn["WriteSetChangeIndex"] = "write_set_change_index";
})(TableItemsSelectColumn = exports.TableItemsSelectColumn || (exports.TableItemsSelectColumn = {}));
var TableMetadatasSelectColumn;
(function (TableMetadatasSelectColumn) {
    TableMetadatasSelectColumn["Handle"] = "handle";
    TableMetadatasSelectColumn["KeyType"] = "key_type";
    TableMetadatasSelectColumn["ValueType"] = "value_type";
})(TableMetadatasSelectColumn = exports.TableMetadatasSelectColumn || (exports.TableMetadatasSelectColumn = {}));
var TokenActivitiesSelectColumn;
(function (TokenActivitiesSelectColumn) {
    TokenActivitiesSelectColumn["CoinAmount"] = "coin_amount";
    TokenActivitiesSelectColumn["CoinType"] = "coin_type";
    TokenActivitiesSelectColumn["CollectionDataIdHash"] = "collection_data_id_hash";
    TokenActivitiesSelectColumn["CollectionName"] = "collection_name";
    TokenActivitiesSelectColumn["CreatorAddress"] = "creator_address";
    TokenActivitiesSelectColumn["EventAccountAddress"] = "event_account_address";
    TokenActivitiesSelectColumn["EventCreationNumber"] = "event_creation_number";
    TokenActivitiesSelectColumn["EventIndex"] = "event_index";
    TokenActivitiesSelectColumn["EventSequenceNumber"] = "event_sequence_number";
    TokenActivitiesSelectColumn["FromAddress"] = "from_address";
    TokenActivitiesSelectColumn["Name"] = "name";
    TokenActivitiesSelectColumn["PropertyVersion"] = "property_version";
    TokenActivitiesSelectColumn["ToAddress"] = "to_address";
    TokenActivitiesSelectColumn["TokenAmount"] = "token_amount";
    TokenActivitiesSelectColumn["TokenDataIdHash"] = "token_data_id_hash";
    TokenActivitiesSelectColumn["TransactionTimestamp"] = "transaction_timestamp";
    TokenActivitiesSelectColumn["TransactionVersion"] = "transaction_version";
    TokenActivitiesSelectColumn["TransferType"] = "transfer_type";
})(TokenActivitiesSelectColumn = exports.TokenActivitiesSelectColumn || (exports.TokenActivitiesSelectColumn = {}));
var TokenActivitiesV2SelectColumn;
(function (TokenActivitiesV2SelectColumn) {
    TokenActivitiesV2SelectColumn["AfterValue"] = "after_value";
    TokenActivitiesV2SelectColumn["BeforeValue"] = "before_value";
    TokenActivitiesV2SelectColumn["EntryFunctionIdStr"] = "entry_function_id_str";
    TokenActivitiesV2SelectColumn["EventAccountAddress"] = "event_account_address";
    TokenActivitiesV2SelectColumn["EventIndex"] = "event_index";
    TokenActivitiesV2SelectColumn["FromAddress"] = "from_address";
    TokenActivitiesV2SelectColumn["IsFungibleV2"] = "is_fungible_v2";
    TokenActivitiesV2SelectColumn["PropertyVersionV1"] = "property_version_v1";
    TokenActivitiesV2SelectColumn["ToAddress"] = "to_address";
    TokenActivitiesV2SelectColumn["TokenAmount"] = "token_amount";
    TokenActivitiesV2SelectColumn["TokenDataId"] = "token_data_id";
    TokenActivitiesV2SelectColumn["TokenStandard"] = "token_standard";
    TokenActivitiesV2SelectColumn["TransactionTimestamp"] = "transaction_timestamp";
    TokenActivitiesV2SelectColumn["TransactionVersion"] = "transaction_version";
    TokenActivitiesV2SelectColumn["Type"] = "type";
})(TokenActivitiesV2SelectColumn = exports.TokenActivitiesV2SelectColumn || (exports.TokenActivitiesV2SelectColumn = {}));
var TokenDatasSelectColumn;
(function (TokenDatasSelectColumn) {
    TokenDatasSelectColumn["CollectionDataIdHash"] = "collection_data_id_hash";
    TokenDatasSelectColumn["CollectionName"] = "collection_name";
    TokenDatasSelectColumn["CreatorAddress"] = "creator_address";
    TokenDatasSelectColumn["DefaultProperties"] = "default_properties";
    TokenDatasSelectColumn["Description"] = "description";
    TokenDatasSelectColumn["DescriptionMutable"] = "description_mutable";
    TokenDatasSelectColumn["LargestPropertyVersion"] = "largest_property_version";
    TokenDatasSelectColumn["Maximum"] = "maximum";
    TokenDatasSelectColumn["MaximumMutable"] = "maximum_mutable";
    TokenDatasSelectColumn["MetadataUri"] = "metadata_uri";
    TokenDatasSelectColumn["Name"] = "name";
    TokenDatasSelectColumn["PayeeAddress"] = "payee_address";
    TokenDatasSelectColumn["PropertiesMutable"] = "properties_mutable";
    TokenDatasSelectColumn["RoyaltyMutable"] = "royalty_mutable";
    TokenDatasSelectColumn["RoyaltyPointsDenominator"] = "royalty_points_denominator";
    TokenDatasSelectColumn["RoyaltyPointsNumerator"] = "royalty_points_numerator";
    TokenDatasSelectColumn["Supply"] = "supply";
    TokenDatasSelectColumn["TokenDataIdHash"] = "token_data_id_hash";
    TokenDatasSelectColumn["TransactionTimestamp"] = "transaction_timestamp";
    TokenDatasSelectColumn["TransactionVersion"] = "transaction_version";
    TokenDatasSelectColumn["UriMutable"] = "uri_mutable";
})(TokenDatasSelectColumn = exports.TokenDatasSelectColumn || (exports.TokenDatasSelectColumn = {}));
var TokenOwnershipsSelectColumn;
(function (TokenOwnershipsSelectColumn) {
    TokenOwnershipsSelectColumn["Amount"] = "amount";
    TokenOwnershipsSelectColumn["CollectionDataIdHash"] = "collection_data_id_hash";
    TokenOwnershipsSelectColumn["CollectionName"] = "collection_name";
    TokenOwnershipsSelectColumn["CreatorAddress"] = "creator_address";
    TokenOwnershipsSelectColumn["Name"] = "name";
    TokenOwnershipsSelectColumn["OwnerAddress"] = "owner_address";
    TokenOwnershipsSelectColumn["PropertyVersion"] = "property_version";
    TokenOwnershipsSelectColumn["TableHandle"] = "table_handle";
    TokenOwnershipsSelectColumn["TableType"] = "table_type";
    TokenOwnershipsSelectColumn["TokenDataIdHash"] = "token_data_id_hash";
    TokenOwnershipsSelectColumn["TransactionTimestamp"] = "transaction_timestamp";
    TokenOwnershipsSelectColumn["TransactionVersion"] = "transaction_version";
})(TokenOwnershipsSelectColumn = exports.TokenOwnershipsSelectColumn || (exports.TokenOwnershipsSelectColumn = {}));
var TokensSelectColumn;
(function (TokensSelectColumn) {
    TokensSelectColumn["CollectionDataIdHash"] = "collection_data_id_hash";
    TokensSelectColumn["CollectionName"] = "collection_name";
    TokensSelectColumn["CreatorAddress"] = "creator_address";
    TokensSelectColumn["Name"] = "name";
    TokensSelectColumn["PropertyVersion"] = "property_version";
    TokensSelectColumn["TokenDataIdHash"] = "token_data_id_hash";
    TokensSelectColumn["TokenProperties"] = "token_properties";
    TokensSelectColumn["TransactionTimestamp"] = "transaction_timestamp";
    TokensSelectColumn["TransactionVersion"] = "transaction_version";
})(TokensSelectColumn = exports.TokensSelectColumn || (exports.TokensSelectColumn = {}));
var UserTransactionsSelectColumn;
(function (UserTransactionsSelectColumn) {
    UserTransactionsSelectColumn["BlockHeight"] = "block_height";
    UserTransactionsSelectColumn["EntryFunctionIdStr"] = "entry_function_id_str";
    UserTransactionsSelectColumn["Epoch"] = "epoch";
    UserTransactionsSelectColumn["ExpirationTimestampSecs"] = "expiration_timestamp_secs";
    UserTransactionsSelectColumn["GasUnitPrice"] = "gas_unit_price";
    UserTransactionsSelectColumn["MaxGasAmount"] = "max_gas_amount";
    UserTransactionsSelectColumn["ParentSignatureType"] = "parent_signature_type";
    UserTransactionsSelectColumn["Sender"] = "sender";
    UserTransactionsSelectColumn["SequenceNumber"] = "sequence_number";
    UserTransactionsSelectColumn["Timestamp"] = "timestamp";
    UserTransactionsSelectColumn["Version"] = "version";
})(UserTransactionsSelectColumn = exports.UserTransactionsSelectColumn || (exports.UserTransactionsSelectColumn = {}));
//# sourceMappingURL=types.js.map