"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZkspaceWallet = void 0;
const coin_base_1 = require("@okxweb3/coin-base");
const coin_ethereum_1 = require("@okxweb3/coin-ethereum");
const zkspace = __importStar(require("./index"));
class ZkspaceWallet extends coin_ethereum_1.EthWallet {
    async signTransaction(param) {
        try {
            let result;
            const data = param.data;
            if (data.type === "transfer") {
                if (data.from == null || data.to == null) {
                    return Promise.reject(coin_base_1.SignTxError);
                }
                result = zkspace.transfer(param.privateKey, data.from, data.nonce, data.accountId, data.chainId, data.to, data.tokenId, data.tokenSymbol, data.decimals, data.feeTokenId, data.feeTokenSymbol, data.feeDecimals, data.amounts, data.fee);
            }
            else if (data.type === "changePubkey") {
                if (data.from == null || data.nonce == null || data.accountId == null) {
                    return Promise.reject(coin_base_1.SignTxError);
                }
                result = zkspace.changePubkey(param.privateKey, data.from, data.nonce, data.accountId);
            }
            else {
                return Promise.reject(coin_base_1.SignTxError);
            }
            return Promise.resolve(result);
        }
        catch (e) {
            return Promise.reject(coin_base_1.SignTxError);
        }
    }
}
exports.ZkspaceWallet = ZkspaceWallet;
//# sourceMappingURL=ZkspaceWallet.js.map